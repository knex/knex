import{_ as n,c as s,o as a,a as t}from"./app.36cb52e5.js";const h='{"title":"Knex Query Builder","description":"","frontmatter":{},"headers":[{"level":2,"title":"Identifier Syntax","slug":"identifier-syntax"},{"level":2,"title":"Common","slug":"common"},{"level":3,"title":"knex","slug":"knex"},{"level":3,"title":"select","slug":"select"},{"level":3,"title":"as","slug":"as"},{"level":3,"title":"column","slug":"column"},{"level":3,"title":"from","slug":"from"},{"level":3,"title":"fromRaw","slug":"fromraw"},{"level":3,"title":"with","slug":"with"},{"level":3,"title":"withRecursive","slug":"withrecursive"},{"level":3,"title":"withMaterialized","slug":"withmaterialized"},{"level":3,"title":"withNotMaterialized","slug":"withnotmaterialized"},{"level":3,"title":"withSchema","slug":"withschema"},{"level":3,"title":"jsonExtract","slug":"jsonextract"},{"level":3,"title":"jsonSet","slug":"jsonset"},{"level":3,"title":"jsonInsert","slug":"jsoninsert"},{"level":3,"title":"jsonRemove","slug":"jsonremove"},{"level":3,"title":"offset","slug":"offset"},{"level":3,"title":"limit","slug":"limit"},{"level":3,"title":"union","slug":"union"},{"level":3,"title":"unionAll","slug":"unionall"},{"level":3,"title":"intersect","slug":"intersect"},{"level":3,"title":"except","slug":"except"},{"level":3,"title":"insert","slug":"insert"},{"level":3,"title":"onConflict","slug":"onconflict"},{"level":3,"title":"upsert","slug":"upsert"},{"level":3,"title":"update","slug":"update"},{"level":3,"title":"updateFrom","slug":"updatefrom"},{"level":3,"title":"del / delete","slug":"del-delete"},{"level":3,"title":"using","slug":"using"},{"level":3,"title":"returning","slug":"returning"},{"level":3,"title":"transacting","slug":"transacting"},{"level":3,"title":"skipLocked","slug":"skiplocked"},{"level":3,"title":"noWait","slug":"nowait"},{"level":3,"title":"count","slug":"count"},{"level":3,"title":"min","slug":"min"},{"level":3,"title":"max","slug":"max"},{"level":3,"title":"sum","slug":"sum"},{"level":3,"title":"avg","slug":"avg"},{"level":3,"title":"increment","slug":"increment"},{"level":3,"title":"decrement","slug":"decrement"},{"level":3,"title":"truncate","slug":"truncate"},{"level":3,"title":"pluck","slug":"pluck"},{"level":3,"title":"first","slug":"first"},{"level":3,"title":"hintComment","slug":"hintcomment"},{"level":3,"title":"comment","slug":"comment"},{"level":3,"title":"clone","slug":"clone"},{"level":3,"title":"denseRank","slug":"denserank"},{"level":3,"title":"rank","slug":"rank"},{"level":3,"title":"rowNumber","slug":"rownumber"},{"level":3,"title":"partitionBy","slug":"partitionby"},{"level":3,"title":"modify","slug":"modify"},{"level":3,"title":"columnInfo","slug":"columninfo"},{"level":3,"title":"debug","slug":"debug"},{"level":3,"title":"connection","slug":"connection"},{"level":3,"title":"options","slug":"options"},{"level":3,"title":"queryContext","slug":"querycontext"},{"level":2,"title":"Extending Query Builder","slug":"extending-query-builder"},{"level":2,"title":"Where Clauses","slug":"where-clauses"},{"level":3,"title":"where","slug":"where"},{"level":3,"title":"whereNot","slug":"wherenot"},{"level":3,"title":"whereIn","slug":"wherein"},{"level":3,"title":"whereNotIn","slug":"wherenotin"},{"level":3,"title":"whereNull","slug":"wherenull"},{"level":3,"title":"whereNotNull","slug":"wherenotnull"},{"level":3,"title":"whereExists","slug":"whereexists"},{"level":3,"title":"whereNotExists","slug":"wherenotexists"},{"level":3,"title":"whereBetween","slug":"wherebetween"},{"level":3,"title":"whereNotBetween","slug":"wherenotbetween"},{"level":3,"title":"whereRaw","slug":"whereraw"},{"level":3,"title":"whereLike","slug":"wherelike"},{"level":3,"title":"whereILike","slug":"whereilike"},{"level":3,"title":"whereJsonObject","slug":"wherejsonobject"},{"level":3,"title":"whereJsonPath","slug":"wherejsonpath"},{"level":3,"title":"whereJsonSupersetOf","slug":"wherejsonsupersetof"},{"level":3,"title":"whereJsonSubsetOf","slug":"wherejsonsubsetof"},{"level":2,"title":"Join Methods","slug":"join-methods"},{"level":3,"title":"join","slug":"join"},{"level":3,"title":"innerJoin","slug":"innerjoin"},{"level":3,"title":"leftJoin","slug":"leftjoin"},{"level":3,"title":"leftOuterJoin","slug":"leftouterjoin"},{"level":3,"title":"rightJoin","slug":"rightjoin"},{"level":3,"title":"rightOuterJoin","slug":"rightouterjoin"},{"level":3,"title":"fullOuterJoin","slug":"fullouterjoin"},{"level":3,"title":"crossJoin","slug":"crossjoin"},{"level":3,"title":"joinRaw","slug":"joinraw"},{"level":2,"title":"OnClauses","slug":"onclauses"},{"level":3,"title":"onIn","slug":"onin"},{"level":3,"title":"onNotIn","slug":"onnotin"},{"level":3,"title":"onNull","slug":"onnull"},{"level":3,"title":"onNotNull","slug":"onnotnull"},{"level":3,"title":"onExists","slug":"onexists"},{"level":3,"title":"onNotExists","slug":"onnotexists"},{"level":3,"title":"onBetween","slug":"onbetween"},{"level":3,"title":"onNotBetween","slug":"onnotbetween"},{"level":3,"title":"onJsonPathEquals","slug":"onjsonpathequals"},{"level":2,"title":"ClearClauses","slug":"clearclauses"},{"level":3,"title":"clear","slug":"clear"},{"level":3,"title":"clearSelect","slug":"clearselect"},{"level":3,"title":"clearWhere","slug":"clearwhere"},{"level":3,"title":"clearGroup","slug":"cleargroup"},{"level":3,"title":"clearOrder","slug":"clearorder"},{"level":3,"title":"clearHaving","slug":"clearhaving"},{"level":3,"title":"clearCounters","slug":"clearcounters"},{"level":3,"title":"distinct","slug":"distinct"},{"level":3,"title":"distinctOn","slug":"distincton"},{"level":3,"title":"groupBy","slug":"groupby"},{"level":3,"title":"groupByRaw","slug":"groupbyraw"},{"level":3,"title":"orderBy","slug":"orderby"},{"level":3,"title":"orderByRaw","slug":"orderbyraw"},{"level":2,"title":"Having Clauses","slug":"having-clauses"},{"level":3,"title":"having","slug":"having"},{"level":3,"title":"havingIn","slug":"havingin"},{"level":3,"title":"havingNotIn","slug":"havingnotin"},{"level":3,"title":"havingNull","slug":"havingnull"},{"level":3,"title":"havingNotNull","slug":"havingnotnull"},{"level":3,"title":"havingExists","slug":"havingexists"},{"level":3,"title":"havingNotExists","slug":"havingnotexists"},{"level":3,"title":"havingBetween","slug":"havingbetween"},{"level":3,"title":"havingNotBetween","slug":"havingnotbetween"},{"level":3,"title":"havingRaw","slug":"havingraw"}],"relativePath":"guide/query-builder.md"}',p={},o=t(`<h1 id="knex-query-builder" tabindex="-1">Knex Query Builder <a class="header-anchor" href="#knex-query-builder" aria-hidden="true">#</a></h1><p>The heart of the library, the knex query builder is the interface used for building and executing standard SQL queries, such as <code>select</code>, <code>insert</code>, <code>update</code>, <code>delete</code>.</p><h2 id="identifier-syntax" tabindex="-1">Identifier Syntax <a class="header-anchor" href="#identifier-syntax" aria-hidden="true">#</a></h2><p>In many places in APIs identifiers like table name or column name can be passed to methods.</p><p>Most commonly one needs just plain <code>tableName.columnName</code>, <code>tableName</code> or <code>columnName</code>, but in many cases one also needs to pass an alias how that identifier is referred later on in the query.</p><p>There are two ways to declare an alias for identifier. One can directly give <code>as aliasName</code> suffix for the identifier (e.g. <code>identifierName as aliasName</code>) or one can pass an object <code>{ aliasName: &#39;identifierName&#39; }</code>.</p><p>If the object has multiple aliases <code>{ alias1: &#39;identifier1&#39;, alias2: &#39;identifier2&#39; }</code>, then all the aliased identifiers are expanded to comma separated list.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Identifier syntax has no place for selecting schema, so if you are doing <code>schemaName.tableName</code>, query might be rendered wrong. Use <code>.withSchema(&#39;schemaName&#39;)</code> instead.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;table&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;table&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">aTitle</span><span class="token operator">:</span> <span class="token string">&#39;a.title&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bTitle</span><span class="token operator">:</span> <span class="token string">&#39;b.title&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;?? = ??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a.column_1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b.column_2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><h2 id="common" tabindex="-1">Common <a class="header-anchor" href="#common" aria-hidden="true">#</a></h2><h3 id="knex" tabindex="-1">knex <a class="header-anchor" href="#knex" aria-hidden="true">#</a></h3><p><strong>knex(tableName, options={only: boolean})</strong><br><strong>knex.[methodName]</strong></p><p>The query builder starts off either by specifying a tableName you wish to query against, or by calling any method directly on the knex object. This kicks off a jQuery-like chain, with which you can call additional query builder methods as needed to construct the query, eventually calling any of the interface methods, to either convert toString, or execute the query with a promise, callback, or stream. Optional second argument for passing options:* <strong>only</strong>: if <code>true</code>, the ONLY keyword is used before the <code>tableName</code> to discard inheriting tables&#39; data.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Only supported in PostgreSQL for now.</p></div><h4 id="usage-with-typescript" tabindex="-1">Usage with TypeScript <a class="header-anchor" href="#usage-with-typescript" aria-hidden="true">#</a></h4><p>If using TypeScript, you can pass the type of database row as a type parameter to get better autocompletion support down the chain.</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to any</span>

<span class="token generic-function"><span class="token function">knex</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span> <span class="token comment">// User is the type of row in database</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Your IDE will be able to help with the completion of id</span>
  <span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to User | undefined</span>
</code></pre></div><p>It is also possible to take advantage of auto-completion support (in TypeScript-aware IDEs) with generic type params when writing code in plain JavaScript through JSDoc comments.</p><div class="language-js"><pre><code><span class="token comment">/**
 * @typedef {Object} User
 * @property {number} id
 * @property {number} age
 * @property {string} name
 *
 * @returns {Knex.QueryBuilder&lt;User, {}&gt;}
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">Users</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;Users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &#39;id&#39; property can be autocompleted by editor</span>
<span class="token function">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5 id="caveat-with-type-inference-and-mutable-fluent-apis" tabindex="-1">Caveat with type inference and mutable fluent APIs <a class="header-anchor" href="#caveat-with-type-inference-and-mutable-fluent-apis" aria-hidden="true">#</a></h5><p>Most of the knex APIs mutate current object and return it. This pattern does not work well with type-inference.</p><div class="language-ts"><pre><code><span class="token generic-function"><span class="token function">knex</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Type of users is inferred as Pick&lt;User, &quot;id&quot;&gt;[]</span>
    <span class="token comment">// Do something with users</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token generic-function"><span class="token function">knex</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Type of users is inferred as Pick&lt;User, &quot;id&quot; | &quot;age&quot;&gt;[]</span>
    <span class="token comment">// Do something with users</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The type of usersQueryBuilder is determined here</span>
<span class="token keyword">const</span> usersQueryBuilder <span class="token operator">=</span> <span class="token generic-function"><span class="token function">knex</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// This select will not change the type of usersQueryBuilder</span>
  <span class="token comment">// We can not change the type of a pre-declared variable in TypeScript</span>
  usersQueryBuilder<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
usersQueryBuilder<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Type of users here will be Pick&lt;User, &quot;id&quot;&gt;[]</span>
  <span class="token comment">// which may not be what you expect.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// You can specify the type of result explicitly through a second type parameter:</span>
<span class="token keyword">const</span> queryBuilder <span class="token operator">=</span> <span class="token generic-function"><span class="token function">knex</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// But there is no type constraint to ensure that these properties have actually been</span>
<span class="token comment">// selected.</span>

<span class="token comment">// So, this will compile:</span>
queryBuilder<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Type of users is Pick&lt;User, &quot;id&quot;&gt; but it will only have name</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you don&#39;t want to manually specify the result type, it is recommended to always use the type of last value of the chain and assign result of any future chain continuation to a separate variable (which will have a different type).</p><h4 id="timeout" tabindex="-1">timeout <a class="header-anchor" href="#timeout" aria-hidden="true">#</a></h4><p><strong>.timeout(ms, options={cancel: boolean})</strong></p><p>Sets a timeout for the query and will throw a TimeoutError if the timeout is exceeded. The error contains information about the query, bindings, and the timeout that was set. Useful for complex queries that you want to make sure are not taking too long to execute. Optional second argument for passing options:* <strong>cancel</strong>: if <code>true</code>, cancel query if timeout is reached.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Only supported in MySQL and PostgreSQL for now.</p></div><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cancel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// MySQL and PostgreSQL only</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="select" tabindex="-1">select <a class="header-anchor" href="#select" aria-hidden="true">#</a></h3><p><strong>.select([*columns])</strong></p><p>Creates a select query, taking an optional array of columns for the query, eventually defaulting to * if none are specified when the query is built. The response of a select call will resolve with an array of objects selected from the database.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5 id="usage-with-typescript-1" tabindex="-1">Usage with TypeScript <a class="header-anchor" href="#usage-with-typescript-1" aria-hidden="true">#</a></h5><p>We are generally able to infer the result type based on the columns being selected as long as the select arguments match exactly the key names in record type. However, aliasing and scoping can get in the way of inference.</p><div class="language-ts"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">from</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to Pick&lt;User, &quot;id&quot;&gt;[]</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">from</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to any[]</span>
<span class="token comment">// ^ TypeScript doesn&#39;t provide us a way to look into a string and infer the type</span>
<span class="token comment">//   from a substring, so we fall back to any</span>

<span class="token comment">// We can side-step this using knex.ref:</span>
knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchema</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">from</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to Pick&lt;User, &quot;id&quot;&gt;[]</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id as identifier&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">from</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to any[], for same reason as above</span>

<span class="token comment">// Refs are handy here too:</span>
knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;identifier&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">from</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to { identifier: number; }[]</span>
</code></pre></div><h3 id="as" tabindex="-1">as <a class="header-anchor" href="#as" aria-hidden="true">#</a></h3><p><strong>.as(name)</strong></p><p>Allows for aliasing a subquery, taking the string you wish to name the current query. If the query is not a sub-query, it will be ignored.</p><div class="language-ts"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">&#39;sum_column1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">&#39;column1 as sum_column1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;t1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;column1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;t1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;ignored_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="column" tabindex="-1">column <a class="header-anchor" href="#column" aria-hidden="true">#</a></h3><p><strong>.column(columns)</strong></p><p>Specifically set the columns to be selected on a select query, taking an array, an object or a list of column names. Passing an object will automatically alias the columns with the given keys.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">by</span><span class="token operator">:</span> <span class="token string">&#39;author&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="from" tabindex="-1">from <a class="header-anchor" href="#from" aria-hidden="true">#</a></h3><p><strong>.from([tableName], options={only: boolean})</strong></p><p>Specifies the table used in the current query, replacing the current table name if one has already been specified. This is typically used in the sub-queries performed in the advanced where or union methods. Optional second argument for passing options:* <strong>only</strong>: if <code>true</code>, the ONLY keyword is used before the <code>tableName</code> to discard inheriting tables&#39; data.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Only supported in PostgreSQL for now.</p></div><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="usage-with-typescript-2" tabindex="-1">Usage with TypeScript <a class="header-anchor" href="#usage-with-typescript-2" aria-hidden="true">#</a></h4><p>We can specify the type of database row through the TRecord type parameter</p><div class="language-ts"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to any[]</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">from</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Results to Pick&lt;User, &quot;id&quot;&gt;[]</span>
</code></pre></div><h3 id="fromraw" tabindex="-1">fromRaw <a class="header-anchor" href="#fromraw" aria-hidden="true">#</a></h3><p><strong>.fromRaw(sql, [bindings])</strong></p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromRaw</span><span class="token punctuation">(</span><span class="token string">&#39;(select * from &quot;users&quot; where &quot;age&quot; &gt; ?)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="with" tabindex="-1">with <a class="header-anchor" href="#with" aria-hidden="true">#</a></h3><p><strong>.with(alias, [columns], callback|builder|raw)</strong></p><p>Add a &quot;with&quot; clause to the query. &quot;With&quot; clauses are supported by PostgreSQL, Oracle, SQLite3 and MSSQL. An optional column list can be provided after the alias; if provided, it must include at least one column name.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>
    <span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from &quot;books&quot; where &quot;author&quot; = ?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>
    <span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select &quot;title&quot; from &quot;books&quot; where &quot;author&quot; = ?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">qb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    qb<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="withrecursive" tabindex="-1">withRecursive <a class="header-anchor" href="#withrecursive" aria-hidden="true">#</a></h3><p><strong>.withRecursive(alias, [columns], callback|builder|raw)</strong></p><p>Identical to the <code>with</code> method except &quot;recursive&quot; is appended to &quot;with&quot; (or not, as required by the target database) to make self-referential CTEs possible. Note that some databases, such as Oracle, require a column list be provided when using an rCTE.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">withRecursive</span><span class="token punctuation">(</span><span class="token string">&#39;ancestors&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">qb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    qb<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;people&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;people.id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">qb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        qb<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;people&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;ancestors&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ancestors.parentId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;people.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;ancestors&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">withRecursive</span><span class="token punctuation">(</span><span class="token string">&#39;family&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;parentName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">qb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    qb<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;parentName&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;folks&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;grandchild&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">unionAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">qb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        qb
          <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;folks.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;folks.parentName&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;folks&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;family&#39;</span><span class="token punctuation">,</span> knex<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;family.parentName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> knex<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;folks.name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;family&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="withmaterialized" tabindex="-1">withMaterialized <a class="header-anchor" href="#withmaterialized" aria-hidden="true">#</a></h3><p><strong>.withMaterialized(alias, [columns], callback|builder|raw)</strong></p><p>Add a &quot;with&quot; materialized clause to the query. &quot;With&quot; materialized clauses are supported by PostgreSQL and SQLite3. An optional column list can be provided after the alias; if provided, it must include at least one column name.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">withMaterialized</span><span class="token punctuation">(</span>
    <span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from &quot;books&quot; where &quot;author&quot; = ?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">withMaterialized</span><span class="token punctuation">(</span>
    <span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select &quot;title&quot; from &quot;books&quot; where &quot;author&quot; = ?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">withMaterialized</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">qb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    qb<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="withnotmaterialized" tabindex="-1">withNotMaterialized <a class="header-anchor" href="#withnotmaterialized" aria-hidden="true">#</a></h3><p><strong>.withNotMaterialized(alias, [columns], callback|builder|raw)</strong></p><p>Add a &quot;with&quot; not materialized clause to the query. &quot;With&quot; not materialized clauses are supported by PostgreSQL and SQLite3. An optional column list can be provided after the alias; if provided, it must include at least one column name.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">withNotMaterialized</span><span class="token punctuation">(</span>
    <span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from &quot;books&quot; where &quot;author&quot; = ?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">withNotMaterialized</span><span class="token punctuation">(</span>
    <span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select &quot;title&quot; from &quot;books&quot; where &quot;author&quot; = ?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">withNotMaterialized</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">qb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    qb<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;with_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="withschema" tabindex="-1">withSchema <a class="header-anchor" href="#withschema" aria-hidden="true">#</a></h3><p><strong>.withSchema([schemaName])</strong></p><p>Specifies the schema to be used as prefix of table name.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">withSchema</span><span class="token punctuation">(</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="jsonextract" tabindex="-1">jsonExtract <a class="header-anchor" href="#jsonextract" aria-hidden="true">#</a></h3><p><strong>.jsonExtract(column|builder|raw|array[], path, [alias], [singleValue])</strong></p><p>Extract a value from a json column given a JsonPath. An alias can be specified. The singleValue boolean can be used to specify, with Oracle or MSSQL, if the value returned by the function is a single value or an array/object value. An array of arrays can be used to specify multiple extractions with one call to this function.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonExtract</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonExtract</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accountName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonExtract</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accountName&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonExtract</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accountName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.lastName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accountLastName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All json*() functions can be used directly from knex object and can be nested.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;cities&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonExtract</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span>knex<span class="token punctuation">.</span><span class="token function">jsonRemove</span><span class="token punctuation">(</span><span class="token string">&#39;population&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.min&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;withoutMin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>knex<span class="token punctuation">.</span><span class="token function">jsonRemove</span><span class="token punctuation">(</span><span class="token string">&#39;population&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.max&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;withoutMax&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>knex<span class="token punctuation">.</span><span class="token function">jsonSet</span><span class="token punctuation">(</span><span class="token string">&#39;population&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.current&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1234&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;currentModified&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="jsonset" tabindex="-1">jsonSet <a class="header-anchor" href="#jsonset" aria-hidden="true">#</a></h3><p><strong>.jsonSet(column|builder|raw, path, value, [alias])</strong></p><p>Return a json value/object/array where a given value is set at the given JsonPath. Value can be single value or json object. If a value already exists at the given place, the value is replaced. Not supported by Redshift and versions before Oracle 21c.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonSet</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newNameCol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonSet</span><span class="token punctuation">(</span>
  <span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;newName&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&#39;newNameCol&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="jsoninsert" tabindex="-1">jsonInsert <a class="header-anchor" href="#jsoninsert" aria-hidden="true">#</a></h3><p><strong>.jsonInsert(column|builder|raw, path, value, [alias])</strong></p><p>Return a json value/object/array where a given value is inserted at the given JsonPath. Value can be single value or json object. If a value exists at the given path, the value is not replaced. Not supported by Redshift and versions before Oracle 21c.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonInsert</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newNameCol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonInsert</span><span class="token punctuation">(</span>
  <span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;newName&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&#39;newNameCol&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonInsert</span><span class="token punctuation">(</span>
  knex<span class="token punctuation">.</span><span class="token function">jsonExtract</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.otherAccount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;newName&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&#39;newNameCol&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="jsonremove" tabindex="-1">jsonRemove <a class="header-anchor" href="#jsonremove" aria-hidden="true">#</a></h3><p><strong>.jsonRemove(column|builder|raw, path, [alias])</strong></p><p>Return a json value/object/array where a given value is removed at the given JsonPath. Not supported by Redshift and versions before Oracle 21c.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonRemove</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;colWithRemove&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonInsert</span><span class="token punctuation">(</span>
  <span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;newName&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&#39;newNameCol&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="offset" tabindex="-1">offset <a class="header-anchor" href="#offset" aria-hidden="true">#</a></h3><p><strong>.offset(value, options={skipBinding: boolean})</strong></p><p>Adds an offset clause to the query. An optional skipBinding parameter may be specified which would avoid setting offset as a prepared value (some databases don&#39;t allow prepared values for offset).</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sql<span class="token punctuation">;</span>

<span class="token comment">// Offset value isn&#39;t a prepared value.</span>
knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">skipBinding</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sql<span class="token punctuation">;</span>
</code></pre></div><h3 id="limit" tabindex="-1">limit <a class="header-anchor" href="#limit" aria-hidden="true">#</a></h3><p><strong>.limit(value, options={skipBinding: boolean})</strong></p><p>Adds a limit clause to the query. An optional skipBinding parameter may be specified to avoid adding limit as a prepared value (some databases don&#39;t allow prepared values for limit).</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sql<span class="token punctuation">;</span>

<span class="token comment">// Limit value isn&#39;t a prepared value.</span>
knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">skipBinding</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sql<span class="token punctuation">;</span>
</code></pre></div><h3 id="union" tabindex="-1">union <a class="header-anchor" href="#union" aria-hidden="true">#</a></h3><p><strong>.union([*queries], [wrap])</strong></p><p>Creates a union query, taking an array or a list of callbacks, builders, or raw statements to build the union statement, with optional boolean wrap. If the <code>wrap</code> parameter is <code>true</code>, the queries will be individually wrapped in parentheses.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token punctuation">[</span>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where first_name is null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where email is null&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you want to apply <code>orderBy</code>, <code>groupBy</code>, <code>limit</code>, <code>offset</code> or <code>having</code> to inputs of the union you need to use <code>knex.union</code> as a base statement. If you don&#39;t do this, those clauses will get appended to the end of the union.</p><div class="language-js"><pre><code><span class="token comment">// example showing how clauses get appended to the end of the query</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;invitations&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;expires_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;invitations&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;expires_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><a href="https://michaelavila.com/knex-querylab/?query=NYOwpgHgFA5ArgZzAJwTAlAOiQGzAYwBdYBLAExgBoACGEAQwFswNMBzZAezgAcAhAJ6kKWOCBKcQUUJFIgAbiUL1CEkGiy4CxGOSq0GzVp2RkUg2JB4lkYBAH0VGdEA" target="_blank" rel="noopener noreferrer">before</a> and <a href="https://michaelavila.com/knex-querylab/?query=NYOwpgHgdAriCWB7EAKA2qSKDkMDOYATntgJRQEA2YAxgC47wAm2ANAATYgCGAtmGSgBzQohgAHAEIBPRi1IdMERiABu8OtzpIQJclVoNszNpx79BiQkyIyckcfEJg8AfS1kAuqSA" target="_blank" rel="noopener noreferrer">after</a></p><h3 id="unionall" tabindex="-1">unionAll <a class="header-anchor" href="#unionall" aria-hidden="true">#</a></h3><p><strong>.unionAll([*queries], [wrap])</strong></p><p>Creates a union all query, with the same method signature as the union method. If the <code>wrap</code> parameter is <code>true</code>, the queries will be individually wrapped in parentheses.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">unionAll</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">unionAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">unionAll</span><span class="token punctuation">(</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where first_name is null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where email is null&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="intersect" tabindex="-1">intersect <a class="header-anchor" href="#intersect" aria-hidden="true">#</a></h3><p><strong>.intersect([*queries], [wrap])</strong></p><p>Creates an intersect query, taking an array or a list of callbacks, builders, or raw statements to build the intersect statement, with optional boolean wrap. If the <code>wrap</code> parameter is <code>true</code>, the queries will be individually wrapped in parentheses. The intersect method is unsupported on MySQL.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where first_name is null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where email is null&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="except" tabindex="-1">except <a class="header-anchor" href="#except" aria-hidden="true">#</a></h3><p><strong>.except([*queries], [wrap])</strong></p><p>Creates an except query, taking an array or a list of callbacks, builders, or raw statements to build the except statement, with optional boolean wrap. If the <code>wrap</code> parameter is <code>true</code>, the queries will be individually wrapped in parentheses. The except method is unsupported on MySQL.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">except</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">except</span><span class="token punctuation">(</span><span class="token punctuation">[</span>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">except</span><span class="token punctuation">(</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where first_name is null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;select * from users where email is null&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="insert" tabindex="-1">insert <a class="header-anchor" href="#insert" aria-hidden="true">#</a></h3><p><strong>.insert(data, [returning], [options])</strong></p><p>Creates an insert query, taking either a hash of properties to be inserted into the row, or an array of inserts, to be executed as a single insert command. If returning array is passed e.g. [&#39;id&#39;, &#39;title&#39;], it resolves the promise / fulfills the callback with an array of all the added rows with specified columns. It&#39;s a shortcut for <a href="#returning">returning method</a></p><div class="language-js"><pre><code><span class="token comment">// Returns [1] in &quot;mysql&quot;, &quot;sqlite&quot;, &quot;oracle&quot;;</span>
<span class="token comment">// [] in &quot;postgresql&quot;</span>
<span class="token comment">// unless the &#39;returning&#39; parameter is set.</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Slaughterhouse Five&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Normalizes for empty keys on multi-row insert:</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;coords&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns [2] in &quot;mysql&quot;, &quot;sqlite&quot;; [2, 3] in &quot;postgresql&quot;</span>
knex
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Great Gatsby&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Fahrenheit 451&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For MSSQL, triggers on tables can interrupt returning a valid value from the standard insert statements. You can add the <code>includeTriggerModifications</code> option to get around this issue. This modifies the SQL so the proper values can be returned. This only modifies the statement if you are using MSSQL, a returning value is specified, and the <code>includeTriggerModifications</code> option is set.</p><div class="language-js"><pre><code><span class="token comment">// Adding the option includeTriggerModifications</span>
<span class="token comment">// allows you to run statements on tables</span>
<span class="token comment">// that contain triggers. Only affects MSSQL.</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Alice in Wonderland&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">includeTriggerModifications</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If one prefers that undefined keys are replaced with <code>NULL</code> instead of <code>DEFAULT</code> one may give <code>useNullAsDefault</code> configuration parameter in knex config.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">useNullAsDefault</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;coords&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-sql"><pre><code><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">\`</span>coords<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>x<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>y<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>&quot;
</code></pre></div><h3 id="onconflict" tabindex="-1">onConflict <a class="header-anchor" href="#onconflict" aria-hidden="true">#</a></h3><p><strong>insert(..).onConflict(column)</strong><br><strong>insert(..).onConflict([column1, column2, ...])</strong><br><strong>insert(..).onConflict(knex.raw(...))</strong></p><p>Implemented for the PostgreSQL, MySQL, and SQLite databases. A modifier for insert queries that specifies alternative behaviour in the case of a conflict. A conflict occurs when a table has a PRIMARY KEY or a UNIQUE index on a column (or a composite index on a set of columns) and a row being inserted has the same value as a row which already exists in the table in those column(s). The default behaviour in case of conflict is to raise an error and abort the query. Using this method you can change this behaviour to either silently ignore the error by using .onConflict().ignore() or to update the existing row with new data (perform an &quot;UPSERT&quot;) by using .onConflict().merge().</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For PostgreSQL and SQLite, the column(s) specified by this method must either be the table&#39;s PRIMARY KEY or have a UNIQUE index on them, or the query will fail to execute. When specifying multiple columns, they must be a composite PRIMARY KEY or have composite UNIQUE index. MySQL will ignore the specified columns and always use the table&#39;s PRIMARY KEY. For cross-platform support across PostgreSQL, MySQL, and SQLite you must both explicitly specify the columns in .onConflict() and those column(s) must be the table&#39;s PRIMARY KEY.</p><p>For PostgreSQL and SQLite, you can use knex.raw(...) function in onConflict. It can be useful to specify condition when you have partial index :</p></div><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;ignore@example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// ignore only on email conflict and active is true.</span>
  <span class="token punctuation">.</span><span class="token function">onConflict</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;(email) where active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>See documentation on .ignore() and .merge() methods for more details.</p><h4 id="ignore" tabindex="-1">ignore <a class="header-anchor" href="#ignore" aria-hidden="true">#</a></h4><p><strong>insert(..).onConflict(..).ignore()</strong></p><p>Implemented for the PostgreSQL, MySQL, and SQLite databases. Modifies an insert query, and causes it to be silently dropped without an error if a conflict occurs. Uses INSERT IGNORE in MySQL, and adds an ON CONFLICT (columns) DO NOTHING clause to the insert statement in PostgreSQL and SQLite.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;ignore@example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onConflict</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="merge" tabindex="-1">merge <a class="header-anchor" href="#merge" aria-hidden="true">#</a></h4><p><strong>insert(..).onConflict(..).merge()</strong><br><strong>insert(..).onConflict(..).merge(updates)</strong></p><p>Implemented for the PostgreSQL, MySQL, and SQLite databases. Modifies an insert query, to turn it into an &#39;upsert&#39; operation. Uses ON DUPLICATE KEY UPDATE in MySQL, and adds an ON CONFLICT (columns) DO UPDATE clause to the insert statement in PostgreSQL and SQLite. By default, it merges all columns.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;ignore@example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onConflict</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This also works with batch inserts:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;john@example.com&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;jane@example.com&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;alex@example.com&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alex Doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onConflict</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It is also possible to specify a subset of the columns to merge when a conflict occurs. For example, you may want to set a &#39;created_at&#39; column when inserting but would prefer not to update it if the row already exists:</p><div class="language-js"><pre><code><span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;ignore@example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">created_at</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
    <span class="token literal-property property">updated_at</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onConflict</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;updated_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It is also possible to specify data to update separately from the data to insert. This is useful if you want to update with different data to the insert. For example, you may want to change a value if the row already exists:</p><div class="language-js"><pre><code><span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;ignore@example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">created_at</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
    <span class="token literal-property property">updated_at</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onConflict</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe The Second&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>For PostgreSQL/SQLite databases only</strong>, it is also possible to add <a href="#where">a WHERE clause</a> to conditionally update only the matching rows:</p><div class="language-js"><pre><code><span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;ignore@example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">created_at</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
    <span class="token literal-property property">updated_at</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onConflict</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">updated_at</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;updated_at&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="upsert" tabindex="-1">upsert <a class="header-anchor" href="#upsert" aria-hidden="true">#</a></h3><p><strong>.upsert(data, [returning], [options])</strong></p><p>Implemented for the CockroachDB and MySQL. Creates an upsert query, taking either a hash of properties to be inserted into the row, or an array of upserts, to be executed as a single upsert command. If returning array is passed e.g. [&#39;id&#39;, &#39;title&#39;], it resolves the promise / fulfills the callback with an array of all the added rows with specified columns. It&#39;s a shortcut for <a href="#returning">returning method</a>. Please be cautious because the returning option is not supported by MySQL.</p><div class="language-js"><pre><code><span class="token comment">// insert new row with unique index on title column</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Great Gatsby&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// update row by unique title &#39;Great Gatsby&#39;</span>
<span class="token comment">// and insert row with title &#39;Fahrenheit 451&#39;</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Great Gatsby&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Fahrenheit 451&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Normalizes for empty keys on multi-row upsert,</span>
<span class="token comment">// result sql:</span>
<span class="token comment">// (&quot;x&quot;, &quot;y&quot;) values (20, default), (default, 30), (10, 20):</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;coords&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-hidden="true">#</a></h3><p><strong>.update(data, [returning], [options])</strong><strong>.update(key, value, [returning], [options])</strong></p><p>Creates an update query, taking a hash of properties or a key/value pair to be updated based on the other query constraints. If returning array is passed e.g. [&#39;id&#39;, &#39;title&#39;], it resolves the promise / fulfills the callback with an array of all the updated rows with specified columns. It&#39;s a shortcut for <a href="#returning">returning method</a></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;published_date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;archived&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">thisKeyIsSkipped</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns [1] in &quot;mysql&quot;, &quot;sqlite&quot;, &quot;oracle&quot;;</span>
<span class="token comment">// [] in &quot;postgresql&quot;</span>
<span class="token comment">// unless the &#39;returning&#39; parameter is set.</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Slaughterhouse Five&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Returns
 * [{
 *   id: 42,
 *   title: &quot;The Hitchhiker&#39;s Guide to the Galaxy&quot;
 * }] **/</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;The Hitchhiker&#39;s Guide to the Galaxy&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For MSSQL, triggers on tables can interrupt returning a valid value from the standard update statements. You can add the <code>includeTriggerModifications</code> option to get around this issue. This modifies the SQL so the proper values can be returned. This only modifies the statement if you are using MSSQL, a returning value is specified, and the <code>includeTriggerModifications</code> option is set.</p><div class="language-js"><pre><code><span class="token comment">// Adding the option includeTriggerModifications allows you</span>
<span class="token comment">// to run statements on tables that contain triggers.</span>
<span class="token comment">// Only affects MSSQL.</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Alice in Wonderland&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">includeTriggerModifications</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="updatefrom" tabindex="-1">updateFrom <a class="header-anchor" href="#updatefrom" aria-hidden="true">#</a></h3><p><strong>.updateFrom(tableName)</strong></p><p>Can be used to define in PostgreSQL an update statement with explicit &#39;from&#39; syntax which can be referenced in &#39;where&#39; conditions.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">updateFrom</span><span class="token punctuation">(</span><span class="token string">&#39;clients&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clients.id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;clients.active&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="del-delete" tabindex="-1">del / delete <a class="header-anchor" href="#del-delete" aria-hidden="true">#</a></h3><p><strong>.del([returning], [options])</strong></p><p>Aliased to del as delete is a reserved word in JavaScript, this method deletes one or more rows, based on other conditions specified in the query. Resolves the promise / fulfills the callback with the number of affected rows for the query.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;activated&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For MSSQL, triggers on tables can interrupt returning a valid value from the standard delete statements. You can add the <code>includeTriggerModifications</code> option to get around this issue. This modifies the SQL so the proper values can be returned. This only modifies the statement if you are using MSSQL, a returning value is specified, and the <code>includeTriggerModifications</code> option is set.</p><div class="language-js"><pre><code><span class="token comment">// Adding the option includeTriggerModifications allows you</span>
<span class="token comment">// to run statements on tables that contain triggers.</span>
<span class="token comment">// Only affects MSSQL.</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice in Wonderland&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">includeTriggerModifications</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For PostgreSQL, Delete statement with joins is both supported with classic &#39;join&#39; syntax and &#39;using&#39; syntax.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;activated&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="using" tabindex="-1">using <a class="header-anchor" href="#using" aria-hidden="true">#</a></h3><p><strong>.using(tableName|tableNames)</strong></p><p>Can be used to define in PostgreSQL a delete statement with joins with explicit &#39;using&#39; syntax. Classic join syntax can be used too.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;activated&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id = users.account_id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="returning" tabindex="-1">returning <a class="header-anchor" href="#returning" aria-hidden="true">#</a></h3><p><strong>.returning(column, [options])</strong><strong>.returning([column1, column2, ...], [options])</strong></p><p>Utilized by PostgreSQL, MSSQL, SQLite, and Oracle databases, the returning method specifies which column should be returned by the insert, update and delete methods. Passed column parameter may be a string or an array of strings. The SQL result be reported as an array of objects, each containing a single property for each of the specified columns. The returning method is not supported on Amazon Redshift.</p><div class="language-js"><pre><code><span class="token comment">// Returns [ { id: 1 } ]</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returning</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Slaughterhouse Five&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns [{ id: 2 } ] in &quot;mysql&quot;, &quot;sqlite&quot;;</span>
<span class="token comment">// [ { id: 2 }, { id: 3 } ] in &quot;postgresql&quot;</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">returning</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Great Gatsby&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Fahrenheit 451&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns [ { id: 1, title: &#39;Slaughterhouse Five&#39; } ]</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">returning</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Slaughterhouse Five&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For MSSQL, triggers on tables can interrupt returning a valid value from the standard DML statements. You can add the <code>includeTriggerModifications</code> option to get around this issue. This modifies the SQL so the proper values can be returned. This only modifies the statement if you are using MSSQL, a returning value is specified, and the <code>includeTriggerModifications</code> option is set.</p><div class="language-js"><pre><code><span class="token comment">// Adding the option includeTriggerModifications allows you</span>
<span class="token comment">// to run statements on tables that contain triggers.</span>
<span class="token comment">// Only affects MSSQL.</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">returning</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">includeTriggerModifications</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Slaughterhouse Five&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="transacting" tabindex="-1">transacting <a class="header-anchor" href="#transacting" aria-hidden="true">#</a></h3><p><strong>.transacting(transactionObj)</strong></p><p>Used by knex.transaction, the transacting method may be chained to any query and passed the object you wish to join the query as part of the transaction for.</p><div class="language-js"><pre><code><span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;bluebird&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
knex
  <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">trx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Old Books&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> id <span class="token operator">=</span> resp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">someExternalMethod</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> trx<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>trx<span class="token punctuation">.</span>commit<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>trx<span class="token punctuation">.</span>rollback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Transaction complete.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="forupdate" tabindex="-1">forUpdate <a class="header-anchor" href="#forupdate" aria-hidden="true">#</a></h4><p><strong>.transacting(t).forUpdate()</strong></p><p>Dynamically added after a transaction is specified, the forUpdate adds a FOR UPDATE in PostgreSQL and MySQL during a select statement. Not supported on Amazon Redshift due to lack of table locks.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="forshare" tabindex="-1">forShare <a class="header-anchor" href="#forshare" aria-hidden="true">#</a></h4><p><strong>.transacting(t).forShare()</strong></p><p>Dynamically added after a transaction is specified, the forShare adds a FOR SHARE in PostgreSQL and a LOCK IN SHARE MODE for MySQL during a select statement. Not supported on Amazon Redshift due to lack of table locks.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="fornokeyupdate" tabindex="-1">forNoKeyUpdate <a class="header-anchor" href="#fornokeyupdate" aria-hidden="true">#</a></h4><p><strong>.transacting(t).forNoKeyUpdate()</strong></p><p>Dynamically added after a transaction is specified, the forNoKeyUpdate adds a FOR NO KEY UPDATE in PostgreSQL.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forNoKeyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="forkeyshare" tabindex="-1">forKeyShare <a class="header-anchor" href="#forkeyshare" aria-hidden="true">#</a></h4><p><strong>.transacting(t).forKeyShare()</strong></p><p>Dynamically added after a transaction is specified, the forKeyShare adds a FOR KEY SHARE in PostgreSQL.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forKeyShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="skiplocked" tabindex="-1">skipLocked <a class="header-anchor" href="#skiplocked" aria-hidden="true">#</a></h3><p><strong>.skipLocked()</strong></p><p>MySQL 8.0+, MariaDB-10.6+ and PostgreSQL 9.5+ only. This method can be used after a lock mode has been specified with either forUpdate or forShare, and will cause the query to skip any locked rows, returning an empty set if none are available.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="nowait" tabindex="-1">noWait <a class="header-anchor" href="#nowait" aria-hidden="true">#</a></h3><p><strong>.noWait()</strong></p><p>MySQL 8.0+, MariaDB-10.3+ and PostgreSQL 9.5+ only. This method can be used after a lock mode has been specified with either forUpdate or forShare, and will cause the query to fail immediately if any selected rows are currently locked.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="count" tabindex="-1">count <a class="header-anchor" href="#count" aria-hidden="true">#</a></h3><p><strong>.count(column|columns|raw, [options])</strong></p><p>Performs a count on the specified column or array of columns (note that some drivers do not support multiple columns). Also accepts raw expressions. The value returned from count (and other aggregation queries) is an array of objects like: <code>[{&#39;COUNT(*)&#39;: 1}]</code>. The actual keys are dialect specific, so usually we would want to specify an alias (Refer examples below). Note that in Postgres, count returns a bigint type which will be a String and not a Number (<a href="https://github.com/brianc/node-pg-types#use" target="_blank" rel="noopener noreferrer">more info</a>).</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&#39;active as a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;active&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token string">&#39;valid&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5 id="usage-with-typescript-3" tabindex="-1">Usage with TypeScript <a class="header-anchor" href="#usage-with-typescript-3" aria-hidden="true">#</a></h5><p>The value of count will, by default, have type of <code>string | number</code>. This may be counter-intuitive but some connectors (eg. postgres) will automatically cast BigInt result to string when javascript&#39;s Number type is not large enough for the value.</p><div class="language-ts"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to: Record&lt;string, number | string&gt;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves to { count?: string | number | undefined; }</span>
</code></pre></div><p>Working with <code>string | number</code> can be inconvenient if you are not working with large tables. Two alternatives are available:</p><div class="language-ts"><pre><code><span class="token comment">// Be explicit about what you want as a result:</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">count</span><span class="token generic class-name"><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Setup a one time declaration to make knex use number as result type for all</span>
<span class="token comment">// count and countDistinct invocations (for any table)</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;knex/types/result&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Registry</span> <span class="token punctuation">{</span>
    Count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Use <strong>countDistinct</strong> to add a distinct expression inside the aggregate function.</p><div class="language-ts"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countDistinct</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="min" tabindex="-1">min <a class="header-anchor" href="#min" aria-hidden="true">#</a></h3><p><strong>.min(column|columns|raw, [options])</strong></p><p>Gets the minimum value for the specified column or array of columns (note that some drivers do not support multiple columns). Also accepts raw expressions.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token string">&#39;age as a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;experience&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logins&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logins&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="max" tabindex="-1">max <a class="header-anchor" href="#max" aria-hidden="true">#</a></h3><p><strong>.max(column|columns|raw, [options])</strong></p><p>Gets the maximum value for the specified column or array of columns (note that some drivers do not support multiple columns). Also accepts raw expressions.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">&#39;age as a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logins&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logins&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">exp</span><span class="token operator">:</span> <span class="token string">&#39;experience&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="sum" tabindex="-1">sum <a class="header-anchor" href="#sum" aria-hidden="true">#</a></h3><p><strong>.sum(column|columns|raw)</strong></p><p>Retrieve the sum of the values of a given column or array of columns (note that some drivers do not support multiple columns). Also accepts raw expressions.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">&#39;products&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">&#39;products as p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token string">&#39;products&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">&#39;products&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">sum</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;products&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orders&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;products&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Use <strong>sumDistinct</strong> to add a distinct expression inside the aggregate function.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sumDistinct</span><span class="token punctuation">(</span><span class="token string">&#39;products&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="avg" tabindex="-1">avg <a class="header-anchor" href="#avg" aria-hidden="true">#</a></h3><p><strong>.avg(column|columns|raw)</strong></p><p>Retrieve the average of the values of a given column or array of columns (note that some drivers do not support multiple columns). Also accepts raw expressions.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">&#39;age as a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logins&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">avg</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logins&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Use <strong>avgDistinct</strong> to add a distinct expression inside the aggregate function.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avgDistinct</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="increment" tabindex="-1">increment <a class="header-anchor" href="#increment" aria-hidden="true">#</a></h3><p><strong>.increment(column, amount)</strong></p><p>Increments a column value by the specified amount. Object syntax is supported for <code>column</code>.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;userid&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">&#39;balance&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">balance</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">times</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="decrement" tabindex="-1">decrement <a class="header-anchor" href="#decrement" aria-hidden="true">#</a></h3><p><strong>.decrement(column, amount)</strong></p><p>Decrements a column value by the specified amount. Object syntax is supported for <code>column</code>.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;userid&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token string">&#39;balance&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">balance</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="truncate" tabindex="-1">truncate <a class="header-anchor" href="#truncate" aria-hidden="true">#</a></h3><p><strong>.truncate()</strong></p><p>Truncates the current table.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="pluck" tabindex="-1">pluck <a class="header-anchor" href="#pluck" aria-hidden="true">#</a></h3><p><strong>.pluck(id)</strong></p><p>This will pluck the specified column from each row in your results, yielding a promise which resolves to the array of values selected.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ids</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="first" tabindex="-1">first <a class="header-anchor" href="#first" aria-hidden="true">#</a></h3><p><strong>.first([columns])</strong></p><p>Similar to select, but only retrieves &amp; resolves with the first record from the query.</p><p>Returns <code>undefined</code> when no rows match.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="hintcomment" tabindex="-1">hintComment <a class="header-anchor" href="#hintcomment" aria-hidden="true">#</a></h3><p><strong>.hintComment(hint|hints)</strong></p><p>Add hints to the query using comment-like syntax <code>/*+ ... */</code>. MySQL and Oracle use this syntax for optimizer hints. Also various DB proxies and routers use this syntax to pass hints to alter their behavior. In other dialects the hints are ignored as simple comments.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;userid&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hintComment</span><span class="token punctuation">(</span><span class="token string">&#39;NO_ICP(accounts)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="comment" tabindex="-1">comment <a class="header-anchor" href="#comment" aria-hidden="true">#</a></h3><p><strong>.comment(comment)</strong></p><p>Prepend comment to the sql query using the syntax <code>/* ... */</code>. Some characters are forbidden such as <code>/*</code>, <code>*/</code> and <code>?</code>.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string">&#39;Get user by id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="clone" tabindex="-1">clone <a class="header-anchor" href="#clone" aria-hidden="true">#</a></h3><p><strong>.clone()</strong></p><p>Clones the current query chain, useful for re-using partial query snippets in other queries without mutating the original.</p><h3 id="denserank" tabindex="-1">denseRank <a class="header-anchor" href="#denserank" aria-hidden="true">#</a></h3><p><strong>.denseRank(alias, ~mixed~)</strong></p><p>Add a dense_rank() call to your query. For all the following queries, alias can be set to a falsy value if not needed.</p><p>String Syntax \u2014 .denseRank(alias, orderByClause, [partitionByClause]) :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">denseRank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It also accepts arrays of strings as argument :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">denseRank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lastName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Raw Syntax \u2014 .denseRank(alias, rawQuery) :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">denseRank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;order by ??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Function Syntax \u2014 .denseRank(alias, function) :</p><p>Use orderBy() and partitionBy() (both chainable) to build your query :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">denseRank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="rank" tabindex="-1">rank <a class="header-anchor" href="#rank" aria-hidden="true">#</a></h3><p><strong>.rank(alias, ~mixed~)</strong></p><p>Add a rank() call to your query. For all the following queries, alias can be set to a falsy value if not needed.</p><p>String Syntax \u2014 .rank(alias, orderByClause, [partitionByClause]) :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It also accepts arrays of strings as argument :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lastName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Raw Syntax \u2014 .rank(alias, rawQuery) :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;order by ??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Function Syntax \u2014 .rank(alias, function) :</p><p>Use orderBy() and partitionBy() (both chainable) to build your query :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="rownumber" tabindex="-1">rowNumber <a class="header-anchor" href="#rownumber" aria-hidden="true">#</a></h3><p><strong>.rowNumber(alias, ~mixed~)</strong></p><p>Add a row_number() call to your query. For all the following queries, alias can be set to a falsy value if not needed.</p><p>String Syntax \u2014 .rowNumber(alias, orderByClause, [partitionByClause]) :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rowNumber</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It also accepts arrays of strings as argument :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rowNumber</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lastName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Raw Syntax \u2014 .rowNumber(alias, rawQuery) :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rowNumber</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;order by ??&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Function Syntax \u2014 .rowNumber(alias, function) :</p><p>Use orderBy() and partitionBy() (both chainable) to build your query :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rowNumber</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="partitionby" tabindex="-1">partitionBy <a class="header-anchor" href="#partitionby" aria-hidden="true">#</a></h3><p><strong>.partitionBy(column, direction)</strong></p><p>Partitions rowNumber, denseRank, rank after a specific column or columns. If direction is not supplied it will default to ascending order.</p><p>No direction sort :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rowNumber</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>With direction sort :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rowNumber</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>With multiobject :</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rowNumber</span><span class="token punctuation">(</span><span class="token string">&#39;alias_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&#39;asc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;lastName&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&#39;desc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="modify" tabindex="-1">modify <a class="header-anchor" href="#modify" aria-hidden="true">#</a></h3><p><strong>.modify(fn, *arguments)</strong></p><p>Allows encapsulating and re-using query snippets and common behaviors as functions. The callback function should receive the query builder as its first argument, followed by the rest of the (optional) parameters passed to modify.</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">withUserName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">queryBuilder<span class="token punctuation">,</span> foreignKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  queryBuilder
    <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> foreignKey<span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;users.user_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
knex
  <span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">&#39;articles&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>withUserName<span class="token punctuation">,</span> <span class="token string">&#39;articles_user.id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">article</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span>user_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="columninfo" tabindex="-1">columnInfo <a class="header-anchor" href="#columninfo" aria-hidden="true">#</a></h3><p><strong>.columnInfo([columnName])</strong></p><p>Returns an object with the column info about the current table, or an individual column if one is passed, returning an object with the following keys:</p><ul><li><strong>defaultValue</strong>: the default value for the column</li><li><strong>type</strong>: the column type</li><li><strong>maxLength</strong>: the max length set for the column</li><li><strong>nullable</strong>: whether the column may be null</li></ul><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">columnInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-hidden="true">#</a></h3><p><strong>.debug([enabled])</strong></p><p>Overrides the global debug setting for the current query chain. If enabled is omitted, query debugging will be turned on.</p><h3 id="connection" tabindex="-1">connection <a class="header-anchor" href="#connection" aria-hidden="true">#</a></h3><p><strong>.connection(dbConnection)</strong></p><p>The method sets the db connection to use for the query without using the connection pool. You should pass to it the same object that acquireConnection() for the corresponding driver returns</p><div class="language-ts"><pre><code><span class="token keyword">const</span> Pool <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;pg-pool&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> pool<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// knex here is a query builder with query already built</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Process error</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h3><p><strong>.options()</strong></p><p>Allows for mixing in additional options as defined by database client specific libraries:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts as a1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts as a2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;a1.email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a2.email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a1.email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a2.email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;a1.id = 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">nestTables</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">rowMode</span><span class="token operator">:</span> <span class="token string">&#39;array&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="querycontext" tabindex="-1">queryContext <a class="header-anchor" href="#querycontext" aria-hidden="true">#</a></h3><p><strong>.queryContext(context)</strong></p><p>Allows for configuring a context to be passed to the <a href="/guide/#wrapidentifier">wrapIdentifier</a> and <a href="/guide/#postprocessresponse">postProcessResponse</a> hooks:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts as a1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">queryContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a1.email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a2.email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The context can be any kind of value and will be passed to the hooks without modification. However, note that <strong>objects will be shallow-cloned</strong> when a query builder instance is <a href="#clone">cloned</a>, which means that they will contain all the properties of the original object but will not be the same object reference. This allows modifying the context for the cloned query builder instance.</p><p>Calling <code>queryContext</code> with no arguments will return any context configured for the query builder instance.</p><h2 id="extending-query-builder" tabindex="-1">Extending Query Builder <a class="header-anchor" href="#extending-query-builder" aria-hidden="true">#</a></h2><p><strong>Important:</strong> this feature is experimental and its API may change in the future.</p><p>It allows to add custom function to the Query Builder.</p><p>Example:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> knex <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
knex<span class="token punctuation">.</span>QueryBuilder<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&#39;customSelect&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> as value</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> meaningOfLife <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">customSelect</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If using TypeScript, you can extend the QueryBuilder interface with your custom method.</p><ol><li>Create a <code>knex.d.ts</code> file inside a <code>@types</code> folder (or any other folder).</li></ol><div class="language-ts"><pre><code><span class="token comment">// knex.d.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Knex <span class="token keyword">as</span> KnexOriginal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;knex&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;knex&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">namespace</span> Knex <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">QueryInterface</span> <span class="token punctuation">{</span>
      <span class="token generic-function"><span class="token function">customSelect</span><span class="token generic class-name"><span class="token operator">&lt;</span>TRecord<span class="token punctuation">,</span> TResult<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
        value<span class="token operator">:</span> <span class="token builtin">number</span>
      <span class="token punctuation">)</span><span class="token operator">:</span> KnexOriginal<span class="token punctuation">.</span>QueryBuilder<span class="token operator">&lt;</span>TRecord<span class="token punctuation">,</span> TResult<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="2"><li>Add the new <code>@types</code> folder to <code>typeRoots</code> in your <code>tsconfig.json</code>.</li></ol><div class="language-json"><pre><code><span class="token comment">// tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules/@types&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@types&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="where-clauses" tabindex="-1">Where Clauses <a class="header-anchor" href="#where-clauses" aria-hidden="true">#</a></h2><p>Several methods exist to assist in dynamic where clauses. In many places functions may be used in place of values, constructing subqueries. In most places existing knex queries may be used to compose sub-queries, etc. Take a look at a few of the examples for each method for instruction on use:</p><p><strong>Important:</strong> Supplying knex with an <code>undefined</code> value to any of the <code>where</code> functions will cause knex to throw an error during sql compilation. This is both for yours and our sake. Knex cannot know what to do with undefined values in a where clause, and generally it would be a programmatic error to supply one to begin with. The error will throw a message containing the type of query and the compiled query-string. Example:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="where" tabindex="-1">where <a class="header-anchor" href="#where" aria-hidden="true">#</a></h3><p><strong>.where(~mixed~)</strong><br><strong>.orWhere</strong></p><p>Object Syntax:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Key, Value:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Functions:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    builder<span class="token punctuation">.</span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNotIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Grouped Chain:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Tester&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Operator:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;columnName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%rowlikeme%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The above query demonstrates the common use case of returning all users for which a specific pattern appears within a designated column.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;votes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> subquery <span class="token operator">=</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;votes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in&#39;</span><span class="token punctuation">,</span> subquery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>.orWhere with an object automatically wraps the statement and creates an <code>or (and - and - and)</code> clause</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">votes</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;knex&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherenot" tabindex="-1">whereNot <a class="header-anchor" href="#wherenot" aria-hidden="true">#</a></h3><p><strong>.whereNot(~mixed~)</strong><strong>.orWhereNot</strong></p><p>Object Syntax:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">first_name</span><span class="token operator">:</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">last_name</span><span class="token operator">:</span> <span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Key, Value:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNot</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Grouped Chain:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNot</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orWhereNot</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orWhereNot</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Tester&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Operator:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNot</span><span class="token punctuation">(</span><span class="token string">&#39;votes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>WhereNot is not suitable for &quot;in&quot; and &quot;between&quot; type subqueries. You should use &quot;not in&quot; and &quot;not between&quot; instead.</p></div><div class="language-js"><pre><code><span class="token keyword">const</span> subquery <span class="token operator">=</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereNot</span><span class="token punctuation">(</span><span class="token string">&#39;votes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not in&#39;</span><span class="token punctuation">,</span> subquery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherein" tabindex="-1">whereIn <a class="header-anchor" href="#wherein" aria-hidden="true">#</a></h3><p><strong>.whereIn(column|columns, array|callback|builder)</strong><br><strong>.orWhereIn</strong></p><p>Shorthand for .where(&#39;id&#39;, &#39;in&#39;, obj), the .whereIn and .orWhereIn methods add a &quot;where in&quot; clause to the query. Note that passing empty array as the value results in a query that never returns any rows (<code>WHERE 1 = 0</code>)</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orWhereIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string">&#39;account_id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> subquery <span class="token operator">=</span> knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string">&#39;account_id&#39;</span><span class="token punctuation">,</span> subquery<span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereIn</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token string">&#39;account_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;test3@example.com&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;test4@example.com&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereIn</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token string">&#39;account_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherenotin" tabindex="-1">whereNotIn <a class="header-anchor" href="#wherenotin" aria-hidden="true">#</a></h3><p><strong>.whereNotIn(column, array|callback|builder)</strong><strong>.orWhereNotIn</strong></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNotIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%Test%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orWhereNotIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherenull" tabindex="-1">whereNull <a class="header-anchor" href="#wherenull" aria-hidden="true">#</a></h3><p><strong>.whereNull(column)</strong><br><strong>.orWhereNull</strong></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string">&#39;updated_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherenotnull" tabindex="-1">whereNotNull <a class="header-anchor" href="#wherenotnull" aria-hidden="true">#</a></h3><p><strong>.whereNotNull(column)</strong><br><strong>.orWhereNotNull</strong></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNotNull</span><span class="token punctuation">(</span><span class="token string">&#39;created_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="whereexists" tabindex="-1">whereExists <a class="header-anchor" href="#whereexists" aria-hidden="true">#</a></h3><p><strong>.whereExists(builder | callback)</strong><br><strong>.orWhereExists</strong></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereExists</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereExists</span><span class="token punctuation">(</span>
  knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherenotexists" tabindex="-1">whereNotExists <a class="header-anchor" href="#wherenotexists" aria-hidden="true">#</a></h3><p><strong>.whereNotExists(builder | callback)</strong><br><strong>.orWhereNotExists</strong></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNotExists</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNotExists</span><span class="token punctuation">(</span>
  knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherebetween" tabindex="-1">whereBetween <a class="header-anchor" href="#wherebetween" aria-hidden="true">#</a></h3><p><strong>.whereBetween(column, range)</strong><br><strong>.orWhereBetween</strong></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereBetween</span><span class="token punctuation">(</span><span class="token string">&#39;votes&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherenotbetween" tabindex="-1">whereNotBetween <a class="header-anchor" href="#wherenotbetween" aria-hidden="true">#</a></h3><p><strong>.whereNotBetween(column, range)</strong><br><strong>.orWhereNotBetween</strong></p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereNotBetween</span><span class="token punctuation">(</span><span class="token string">&#39;votes&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="whereraw" tabindex="-1">whereRaw <a class="header-anchor" href="#whereraw" aria-hidden="true">#</a></h3><p><strong>.whereRaw(query, [bindings])</strong></p><p>Convenience helper for .where(knex.raw(query)).</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;id = ?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherelike" tabindex="-1">whereLike <a class="header-anchor" href="#wherelike" aria-hidden="true">#</a></h3><p><strong>.whereLike(column, string|builder|raw)</strong><br><strong>.orWhereLike</strong></p><p>Adds a where clause with case-sensitive substring comparison on a given column with a given value.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereLike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%mail%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereLike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%mail%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">andWhereLike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%.com&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orWhereLike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%name%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="whereilike" tabindex="-1">whereILike <a class="header-anchor" href="#whereilike" aria-hidden="true">#</a></h3><p><strong>.whereILike(column, string|builder|raw)</strong><br><strong>.orWhereILike</strong></p><p>Adds a where clause with case-insensitive substring comparison on a given column with a given value.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereILike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%mail%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">whereILike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%MAIL%&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">andWhereILike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%.COM&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orWhereILike</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%NAME%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherejsonobject" tabindex="-1">whereJsonObject <a class="header-anchor" href="#wherejsonobject" aria-hidden="true">#</a></h3><p><strong>.whereJsonObject(column, string|json|builder|raw)</strong></p><p>Adds a where clause with json object comparison on given json column.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereJsonObject</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;user_name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherejsonpath" tabindex="-1">whereJsonPath <a class="header-anchor" href="#wherejsonpath" aria-hidden="true">#</a></h3><p><strong>.whereJsonPath(column, jsonPath, operator, value)</strong></p><p>Adds a where clause with comparison of a value returned by a JsonPath given an operator and a value.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereJsonPath</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereJsonPath</span><span class="token punctuation">(</span><span class="token string">&#39;json_col&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherejsonsupersetof" tabindex="-1">whereJsonSupersetOf <a class="header-anchor" href="#wherejsonsupersetof" aria-hidden="true">#</a></h3><p><strong>.whereJsonSupersetOf(column, string|json|builder|raw)</strong></p><p>Adds a where clause where the comparison is true if a json given by the column include a given value. Only on MySQL, PostgreSQL and CockroachDB.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereJsonSupersetOf</span><span class="token punctuation">(</span><span class="token string">&#39;hobbies&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">sport</span><span class="token operator">:</span> <span class="token string">&#39;foot&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wherejsonsubsetof" tabindex="-1">whereJsonSubsetOf <a class="header-anchor" href="#wherejsonsubsetof" aria-hidden="true">#</a></h3><p><strong>.whereJsonSubsetOf(column, string|json|builder|raw)</strong></p><p>Adds a where clause where the comparison is true if a json given by the column is included in a given value. Only on MySQL, PostgreSQL and CockroachDB.</p><div class="language-js"><pre><code><span class="token comment">// given a hobby column with { &quot;sport&quot; : &quot;tennis&quot; },</span>
<span class="token comment">// the where clause is true</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereJsonSubsetOf</span><span class="token punctuation">(</span><span class="token string">&#39;hobby&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">sport</span><span class="token operator">:</span> <span class="token string">&#39;tennis&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">book</span><span class="token operator">:</span> <span class="token string">&#39;fantasy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="join-methods" tabindex="-1">Join Methods <a class="header-anchor" href="#join-methods" aria-hidden="true">#</a></h2><p>Several methods are provided which assist in building joins.</p><h3 id="join" tabindex="-1">join <a class="header-anchor" href="#join" aria-hidden="true">#</a></h3><p><strong>.join(table, first, [operator], second)</strong></p><p>The join builder can be used to specify joins between tables, with the first argument being the joining table, the next three arguments being the first join column, the join operator and the second join column, respectively.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.user_id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.phone&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.user_id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.phone&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For grouped joins, specify a function as the second argument for the join query, and use <code>on</code> with <code>orOn</code> or <code>andOn</code> to create joins that are grouped with parentheses.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;users.id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For nested join statements, specify a function as first argument of <code>on</code>, <code>orOn</code> or <code>andOn</code></p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It is also possible to use an object to represent the join syntax.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;accounts.id&#39;</span><span class="token operator">:</span> <span class="token string">&#39;users.account_id&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you need to use a literal value (string, number, or boolean) in a join instead of a column, use <code>knex.raw</code>.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.type&#39;</span><span class="token punctuation">,</span> knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="innerjoin" tabindex="-1">innerJoin <a class="header-anchor" href="#innerjoin" aria-hidden="true">#</a></h3><p><strong>.innerJoin(table, ~mixed~)</strong></p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
    <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;users.id&#39;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="leftjoin" tabindex="-1">leftJoin <a class="header-anchor" href="#leftjoin" aria-hidden="true">#</a></h3><p><strong>.leftJoin(table, ~mixed~)</strong></p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;users.id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="leftouterjoin" tabindex="-1">leftOuterJoin <a class="header-anchor" href="#leftouterjoin" aria-hidden="true">#</a></h3><p><strong>.leftOuterJoin(table, ~mixed~)</strong></p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftOuterJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftOuterJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;users.id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="rightjoin" tabindex="-1">rightJoin <a class="header-anchor" href="#rightjoin" aria-hidden="true">#</a></h3><p><strong>.rightJoin(table, ~mixed~)</strong></p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rightJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rightJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;users.id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="rightouterjoin" tabindex="-1">rightOuterJoin <a class="header-anchor" href="#rightouterjoin" aria-hidden="true">#</a></h3><p><strong>.rightOuterJoin(table, ~mixed~)</strong></p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rightOuterJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">rightOuterJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;users.id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="fullouterjoin" tabindex="-1">fullOuterJoin <a class="header-anchor" href="#fullouterjoin" aria-hidden="true">#</a></h3><p><strong>.fullOuterJoin(table, ~mixed~)</strong></p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fullOuterJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fullOuterJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;users.id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="crossjoin" tabindex="-1">crossJoin <a class="header-anchor" href="#crossjoin" aria-hidden="true">#</a></h3><p><strong>.crossJoin(table, ~mixed~)</strong></p><p>Cross join conditions are only supported in MySQL and SQLite3. For join conditions rather use innerJoin.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">crossJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">crossJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;accounts.user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">crossJoin</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;accounts.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users.account_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;accounts.owner_id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;users.id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="joinraw" tabindex="-1">joinRaw <a class="header-anchor" href="#joinraw" aria-hidden="true">#</a></h3><p><strong>.joinRaw(sql, [bindings])</strong></p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">joinRaw</span><span class="token punctuation">(</span><span class="token string">&#39;natural full join table1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;natural full join table1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="onclauses" tabindex="-1">OnClauses <a class="header-anchor" href="#onclauses" aria-hidden="true">#</a></h2><h3 id="onin" tabindex="-1">onIn <a class="header-anchor" href="#onin" aria-hidden="true">#</a></h3><p><strong>.onIn(column, values)</strong></p><p>Adds a onIn clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onIn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onnotin" tabindex="-1">onNotIn <a class="header-anchor" href="#onnotin" aria-hidden="true">#</a></h3><p><strong>.onNotIn(column, values)</strong></p><p>Adds a onNotIn clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onNotIn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onnull" tabindex="-1">onNull <a class="header-anchor" href="#onnull" aria-hidden="true">#</a></h3><p><strong>.onNull(column)</strong></p><p>Adds a onNull clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onNull</span><span class="token punctuation">(</span><span class="token string">&#39;contacts.email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onnotnull" tabindex="-1">onNotNull <a class="header-anchor" href="#onnotnull" aria-hidden="true">#</a></h3><p><strong>.onNotNull(column)</strong></p><p>Adds a onNotNull clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onNotNull</span><span class="token punctuation">(</span><span class="token string">&#39;contacts.email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onexists" tabindex="-1">onExists <a class="header-anchor" href="#onexists" aria-hidden="true">#</a></h3><p><strong>.onExists(builder | callback)</strong></p><p>Adds a onExists clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onExists</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onnotexists" tabindex="-1">onNotExists <a class="header-anchor" href="#onnotexists" aria-hidden="true">#</a></h3><p><strong>.onNotExists(builder | callback)</strong></p><p>Adds a onNotExists clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onNotExists</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onbetween" tabindex="-1">onBetween <a class="header-anchor" href="#onbetween" aria-hidden="true">#</a></h3><p><strong>.onBetween(column, range)</strong></p><p>Adds a onBetween clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onBetween</span><span class="token punctuation">(</span><span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onnotbetween" tabindex="-1">onNotBetween <a class="header-anchor" href="#onnotbetween" aria-hidden="true">#</a></h3><p><strong>.onNotBetween(column, range)</strong></p><p>Adds a onNotBetween clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;contacts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onNotBetween</span><span class="token punctuation">(</span>
      <span class="token string">&#39;contacts.id&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="onjsonpathequals" tabindex="-1">onJsonPathEquals <a class="header-anchor" href="#onjsonpathequals" aria-hidden="true">#</a></h3><p><strong>.onJsonPathEquals(column, range)</strong></p><p>Adds a onJsonPathEquals clause to the query. The clause performs a join on value returned by two json paths on two json columns.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;cities&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;cities.name as cityName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;country.name as countryName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;country&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onJsonPathEquals</span><span class="token punctuation">(</span>
      <span class="token comment">// json column in cities</span>
      <span class="token string">&#39;country_name&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// json path to country name in &#39;country_name&#39; column</span>
      <span class="token string">&#39;$.country.name&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// json column in country</span>
      <span class="token string">&#39;description&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// json field in &#39;description&#39; column</span>
      <span class="token string">&#39;$.name&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="clearclauses" tabindex="-1">ClearClauses <a class="header-anchor" href="#clearclauses" aria-hidden="true">#</a></h2><h3 id="clear" tabindex="-1">clear <a class="header-anchor" href="#clear" aria-hidden="true">#</a></h3><p><strong>.clear(statement)</strong></p><p>Clears the specified operator from the query. Available operators: &#39;select&#39; alias &#39;columns&#39;, &#39;with&#39;, &#39;select&#39;, &#39;columns&#39;, &#39;where&#39;, &#39;union&#39;, &#39;join&#39;, &#39;group&#39;, &#39;order&#39;, &#39;having&#39;, &#39;limit&#39;, &#39;offset&#39;, &#39;counter&#39;, &#39;counters&#39;. Counter(s) alias for method .clearCounter()</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">&#39;select&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">&#39;where&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="clearselect" tabindex="-1">clearSelect <a class="header-anchor" href="#clearselect" aria-hidden="true">#</a></h3><p><strong>.clearSelect()</strong></p><p>Deprecated, use clear(&#39;select&#39;). Clears all select clauses from the query, excluding subqueries.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="clearwhere" tabindex="-1">clearWhere <a class="header-anchor" href="#clearwhere" aria-hidden="true">#</a></h3><p><strong>.clearWhere()</strong></p><p>Deprecated, use clear(&#39;where&#39;). Clears all where clauses from the query, excluding subqueries.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="cleargroup" tabindex="-1">clearGroup <a class="header-anchor" href="#cleargroup" aria-hidden="true">#</a></h3><p><strong>.clearGroup()</strong></p><p>Deprecated, use clear(&#39;group&#39;). Clears all group clauses from the query, excluding subqueries.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="clearorder" tabindex="-1">clearOrder <a class="header-anchor" href="#clearorder" aria-hidden="true">#</a></h3><p><strong>.clearOrder()</strong></p><p>Deprecated, use clear(&#39;order&#39;). Clears all order clauses from the query, excluding subqueries.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="clearhaving" tabindex="-1">clearHaving <a class="header-anchor" href="#clearhaving" aria-hidden="true">#</a></h3><p><strong>.clearHaving()</strong></p><p>Deprecated, use clear(&#39;having&#39;). Clears all having clauses from the query, excluding subqueries.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">having</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearHaving</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="clearcounters" tabindex="-1">clearCounters <a class="header-anchor" href="#clearcounters" aria-hidden="true">#</a></h3><p><strong>.clearCounters()</strong></p><p>Clears all increments/decrements clauses from the query.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;foo@bar.com&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">balance</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">clearCounters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="distinct" tabindex="-1">distinct <a class="header-anchor" href="#distinct" aria-hidden="true">#</a></h3><p><strong>.distinct([*columns])</strong></p><p>Sets a distinct clause on the query. If the parameter is falsy or empty array, method falls back to &#39;*&#39;.</p><div class="language-js"><pre><code><span class="token comment">// select distinct &#39;first_name&#39; from customers</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;customers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;last_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// select which eliminates duplicate rows</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;customers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="distincton" tabindex="-1">distinctOn <a class="header-anchor" href="#distincton" aria-hidden="true">#</a></h3><p><strong>.distinctOn([*columns])</strong></p><p>PostgreSQL only. Adds a distinctOn clause to the query.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinctOn</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="groupby" tabindex="-1">groupBy <a class="header-anchor" href="#groupby" aria-hidden="true">#</a></h3><p><strong>.groupBy(*names)</strong></p><p>Adds a group by clause to the query.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="groupbyraw" tabindex="-1">groupByRaw <a class="header-anchor" href="#groupbyraw" aria-hidden="true">#</a></h3><p><strong>.groupByRaw(sql)</strong></p><p>Adds a raw group by clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;year&#39;</span><span class="token punctuation">,</span> knex<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">&#39;SUM(profit)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;sales&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">groupByRaw</span><span class="token punctuation">(</span><span class="token string">&#39;year WITH ROLLUP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="orderby" tabindex="-1">orderBy <a class="header-anchor" href="#orderby" aria-hidden="true">#</a></h3><p><strong>.orderBy(column|columns, [direction], [nulls])</strong></p><p>Adds an order by clause to the query. column can be string, or list mixed with string and object. nulls specify where the nulls values are put (can be &#39;first&#39; or &#39;last&#39;).</p><p>Single Column:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Multiple Columns:</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&#39;desc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;email&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&#39;desc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;email&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">nulls</span><span class="token operator">:</span> <span class="token string">&#39;last&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="orderbyraw" tabindex="-1">orderByRaw <a class="header-anchor" href="#orderbyraw" aria-hidden="true">#</a></h3><p><strong>.orderByRaw(sql)</strong></p><p>Adds an order by raw clause to the query.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByRaw</span><span class="token punctuation">(</span><span class="token string">&#39;col DESC NULLS LAST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="having-clauses" tabindex="-1">Having Clauses <a class="header-anchor" href="#having-clauses" aria-hidden="true">#</a></h2><h3 id="having" tabindex="-1">having <a class="header-anchor" href="#having" aria-hidden="true">#</a></h3><p><strong>.having(column, operator, value)</strong></p><p>Adds a having clause to the query.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">having</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingin" tabindex="-1">havingIn <a class="header-anchor" href="#havingin" aria-hidden="true">#</a></h3><p><strong>.havingIn(column, values)</strong></p><p>Adds a havingIn clause to the query.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">havingIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingnotin" tabindex="-1">havingNotIn <a class="header-anchor" href="#havingnotin" aria-hidden="true">#</a></h3><p><strong>.havingNotIn(column, values)</strong></p><p>Adds a havingNotIn clause to the query.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">havingNotIn</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingnull" tabindex="-1">havingNull <a class="header-anchor" href="#havingnull" aria-hidden="true">#</a></h3><p><strong>.havingNull(column)</strong></p><p>Adds a havingNull clause to the query.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">havingNull</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingnotnull" tabindex="-1">havingNotNull <a class="header-anchor" href="#havingnotnull" aria-hidden="true">#</a></h3><p><strong>.havingNotNull(column)</strong></p><p>Adds a havingNotNull clause to the query.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">havingNotNull</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingexists" tabindex="-1">havingExists <a class="header-anchor" href="#havingexists" aria-hidden="true">#</a></h3><p><strong>.havingExists(builder | callback)</strong></p><p>Adds a havingExists clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">havingExists</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingnotexists" tabindex="-1">havingNotExists <a class="header-anchor" href="#havingnotexists" aria-hidden="true">#</a></h3><p><strong>.havingNotExists(builder | callback)</strong></p><p>Adds a havingNotExists clause to the query.</p><div class="language-js"><pre><code>knex
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">havingNotExists</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string">&#39;users.account_id = accounts.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingbetween" tabindex="-1">havingBetween <a class="header-anchor" href="#havingbetween" aria-hidden="true">#</a></h3><p><strong>.havingBetween(column, range)</strong></p><p>Adds a havingBetween clause to the query.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">havingBetween</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingnotbetween" tabindex="-1">havingNotBetween <a class="header-anchor" href="#havingnotbetween" aria-hidden="true">#</a></h3><p><strong>.havingNotBetween(column, range)</strong></p><p>Adds a havingNotBetween clause to the query.</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">havingNotBetween</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="havingraw" tabindex="-1">havingRaw <a class="header-anchor" href="#havingraw" aria-hidden="true">#</a></h3><p><strong>.havingRaw(sql, [bindings])</strong></p><p>Adds a havingRaw clause to the query.</p><div class="language-js"><pre><code><span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">havingRaw</span><span class="token punctuation">(</span><span class="token string">&#39;count &gt; ?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,611),e=[o];function c(u,i,l,k,r,d){return a(),s("div",null,e)}var f=n(p,[["render",c]]);export{h as __pageData,f as default};
