import{_ as n,c as s,o as a,a as t}from"./app.36cb52e5.js";const m='{"title":"Installation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node.js","slug":"node-js"},{"level":2,"title":"Browser","slug":"browser"},{"level":2,"title":"Configuration Options","slug":"configuration-options"},{"level":3,"title":"withUserParams","slug":"withuserparams"},{"level":3,"title":"debug","slug":"debug"},{"level":3,"title":"asyncStackTraces","slug":"asyncstacktraces"},{"level":3,"title":"pool","slug":"pool"},{"level":3,"title":"afterCreate","slug":"aftercreate"},{"level":3,"title":"acquireConnectionTimeout","slug":"acquireconnectiontimeout"},{"level":3,"title":"fetchAsString","slug":"fetchasstring"},{"level":3,"title":"migrations","slug":"migrations"},{"level":3,"title":"postProcessResponse","slug":"postprocessresponse"},{"level":3,"title":"wrapIdentifier","slug":"wrapidentifier"},{"level":3,"title":"log","slug":"log"},{"level":3,"title":"compileSqlOnError","slug":"compilesqlonerror"},{"level":2,"title":"TypeScript","slug":"typescript"}],"relativePath":"guide/index.md"}',p={},e=t(`<h1 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h1><p>Knex can be used as an SQL query builder in both Node.JS and the browser, limited to WebSQL&#39;s constraints (like the inability to drop tables or read schemas). Composing SQL queries in the browser for execution on the server is highly discouraged, as this can be the cause of serious security vulnerabilities. The browser builds outside of WebSQL are primarily for learning purposes - for example, you can pop open the console and build queries on this page using the <strong>knex</strong> object.</p><h2 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-hidden="true">#</a></h2><p>The primary target environment for Knex is Node.js, you will need to install the <code>knex</code> library, and then install the appropriate database library: <a href="https://github.com/brianc/node-postgres" target="_blank" rel="noopener noreferrer"><code>pg</code></a> for PostgreSQL, CockroachDB and Amazon Redshift, <a href="https://github.com/brianc/node-pg-native" target="_blank" rel="noopener noreferrer"><code>pg-native</code></a> for PostgreSQL with native C++ <code>libpq</code> bindings (requires PostgresSQL installed to link against), <a href="https://github.com/felixge/node-mysql" target="_blank" rel="noopener noreferrer"><code>mysql</code></a> for MySQL or MariaDB, <a href="https://github.com/mapbox/node-sqlite3" target="_blank" rel="noopener noreferrer"><code>sqlite3</code></a> for SQLite3, or <a href="https://github.com/tediousjs/tedious" target="_blank" rel="noopener noreferrer"><code>tedious</code></a> for MSSQL.</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> knex <span class="token parameter variable">--save</span>

<span class="token comment"># Then add one of the following (adding a --save) flag:</span>
$ <span class="token function">npm</span> <span class="token function">install</span> pg
$ <span class="token function">npm</span> <span class="token function">install</span> pg-native
$ <span class="token function">npm</span> <span class="token function">install</span> sqlite3
$ <span class="token function">npm</span> <span class="token function">install</span> better-sqlite3
$ <span class="token function">npm</span> <span class="token function">install</span> mysql
$ <span class="token function">npm</span> <span class="token function">install</span> mysql2
$ <span class="token function">npm</span> <span class="token function">install</span> oracledb
$ <span class="token function">npm</span> <span class="token function">install</span> tedious
</code></pre></div><p><em>If you want to use CockroachDB or Redshift instance, you can use the <code>pg</code> driver.</em></p><p><em>If you want to use a MariaDB instance, you can use the <code>mysql</code> driver.</em></p><h2 id="browser" tabindex="-1">Browser <a class="header-anchor" href="#browser" aria-hidden="true">#</a></h2><p>Knex can be built using a JavaScript build tool such as <a href="http://browserify.org/" target="_blank" rel="noopener noreferrer">browserify</a> or <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener noreferrer">webpack</a>. In fact, this documentation uses a webpack build which <a href="https://github.com/knex/documentation/blob/a4de1b2eb50d6699f126be8d134f3d1acc4fc69d/components/Container.jsx#L3" target="_blank" rel="noopener noreferrer">includes knex</a>. View source on this page to see the browser build in-action (the global <code>knex</code> variable).</p><h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-hidden="true">#</a></h2><p>The <code>knex</code> module is itself a function which takes a configuration object for Knex, accepting a few parameters. The <code>client</code> parameter is required and determines which client adapter will be used with the library.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The connection options are passed directly to the appropriate database client to create the connection, and may be either an object, a connection string, or a function returning an object:</p><div class="info custom-block"><p class="custom-block-title">PostgreSQL</p><p>Knex&#39;s PostgreSQL client allows you to set the initial search path for each connection automatically using an additional option &quot;searchPath&quot; as shown below.</p><div class="language-js"><pre><code><span class="token keyword">const</span> pg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;pg&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PG_CONNECTION_STRING</span><span class="token punctuation">,</span>
  <span class="token literal-property property">searchPath</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><p>When using the PostgreSQL driver, another usage pattern for instantiating the Knex configuration object could be to use a <code>connection: {}</code> object details to specify various flags such as enabling SSL, a connection string, and individual connection configuration fields all in the same object. Consider the following example:</p><div class="info custom-block"><p class="custom-block-title">PostgreSQL</p><p>If <code>connectionString</code> is highest priority to use. If left unspecified then connection details will be determined using the individual connection fields (<code>host</code>, <code>port</code>, etc), and finally an SSL configuration will be enabled based on a truthy value of <code>config[&quot;DB_SSL&quot;]</code> which will also accept self-signed certificates.</p><div class="language-js"><pre><code><span class="token keyword">const</span> pg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;pg&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">connectionString</span><span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> config<span class="token punctuation">[</span><span class="token string">&#39;DB_HOST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> config<span class="token punctuation">[</span><span class="token string">&#39;DB_PORT&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> config<span class="token punctuation">[</span><span class="token string">&#39;DB_USER&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> config<span class="token punctuation">[</span><span class="token string">&#39;DB_NAME&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> config<span class="token punctuation">[</span><span class="token string">&#39;DB_PASSWORD&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ssl</span><span class="token operator">:</span> config<span class="token punctuation">[</span><span class="token string">&#39;DB_SSL&#39;</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><p>The following are SQLite usage patterns for instantiating the Knex configuration object:</p><div class="info custom-block"><p class="custom-block-title">SQLite3 or Better-SQLite3</p><p>When you use the SQLite3 or Better-SQLite3 adapter, there is a filename required, not a network connection. For example:</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;sqlite3&#39;</span><span class="token punctuation">,</span> <span class="token comment">// or &#39;better-sqlite3&#39;</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./mydb.sqlite&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can also run either SQLite3 or Better-SQLite3 with an in-memory database by providing <code>:memory:</code> as the filename. For example:</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;sqlite3&#39;</span><span class="token punctuation">,</span> <span class="token comment">// or &#39;better-sqlite3&#39;</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;:memory:&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><div class="info custom-block"><p class="custom-block-title">SQLite3</p><p>When you use the SQLite3 adapter, you can set flags used to open the connection. For example:</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;sqlite3&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;file:memDb1?mode=memory&amp;cache=shared&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">flags</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;OPEN_URI&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OPEN_SHAREDCACHE&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><div class="info custom-block"><p class="custom-block-title">Better-SQLite3</p><p>With the Better-SQLite3 adapter, you can use <code>options.nativeBinding</code> to specify the location of the adapter&#39;s compiled C++ addon. This can be useful when your build system does a lot of transformation/relocation of files.</p><p>Example use:</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;better-sqlite3&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;:memory:&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nativeBinding</span><span class="token operator">:</span> <span class="token string">&#39;/path/to/better_sqlite3.node&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Additionally, you can open the database in read-only mode using <code>options.readonly</code>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;better-sqlite3&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;/path/to/db.sqlite3&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">readonly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For more information, see the <a href="https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md#new-databasepath-options" target="_blank" rel="noopener noreferrer">Better-SQLite3 documentation</a> on database connection options.</p></div><div class="info custom-block"><p class="custom-block-title">MSSQL</p><p>When you use the MSSQL client, you can define a <code>mapBinding</code> function to define your own logic for mapping from knex query parameters to <code>tedious</code> types. Returning undefined from the function will fallback to the default mapping.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">TYPES</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tedious&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mssql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">mapBinding</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// bind all strings to varchar instead of nvarchar</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TYPES</span><span class="token punctuation">.</span>VarChar<span class="token punctuation">,</span>
            value<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// allow devs to pass tedious type at query time</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> value<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> value<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// undefined is returned; falling back to default mapping function</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The database version can be added in knex configuration, when you use the PostgreSQL adapter to connect a non-standard database.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;pg&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;7.2&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">5432</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;5.7&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>When using a custom PostgreSQL client like <code>knex-aurora-data-api-client</code>, you can explicitly state if it supports jsonb column types</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex-aurora-data-api-client&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>postgres<span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span> resourceArn<span class="token punctuation">,</span> secretArn<span class="token punctuation">,</span> <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mydb</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;data-api&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">jsonbSupport</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><p>A function can be used to determine the connection configuration dynamically. This function receives no parameters, and returns either a configuration object or a promise for a configuration object.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;sqlite3&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">connection</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SQLITE_FILENAME</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>By default, the configuration object received via a function is cached and reused for all connections. To change this behavior, an <code>expirationChecker</code> function can be returned as part of the configuration object. The <code>expirationChecker</code> is consulted before trying to create new connections, and in case it returns <code>true</code>, a new configuration object is retrieved. For example, to work with an authentication token that has a limited lifespan:</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;postgres&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">connection</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> token<span class="token punctuation">,</span> tokenExpiration <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">someCallToGetTheToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;your_host&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">5432</span><span class="token punctuation">,</span>
      <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> token<span class="token punctuation">,</span>
      <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">expirationChecker</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tokenExpiration <span class="token operator">&lt;=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can also connect via a unix domain socket, which will ignore host and port.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">socketPath</span><span class="token operator">:</span> <span class="token string">&#39;/path/to/socket.sock&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>userParams</code> is an optional parameter that allows you to pass arbitrary parameters which will be accessible via <code>knex.userParams</code> property:</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">userParams</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">userParam1</span><span class="token operator">:</span> <span class="token string">&#39;451&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Initializing the library should normally only ever happen once in your application, as it creates a connection pool for the current database, you should use the instance returned from the initialize call throughout your library.</p><p>Specify the client for the particular flavour of SQL you are interested in.</p><div class="language-js"><pre><code><span class="token keyword">const</span> pg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;pg&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returning</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;insert into &quot;table&quot; (&quot;a&quot;) values (&#39;b&#39;)&quot;</span>

<span class="token function">pg</span><span class="token punctuation">(</span><span class="token string">&#39;table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returning</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;insert into &quot;table&quot; (&quot;a&quot;) values (&#39;b&#39;) returning *&quot;</span>
</code></pre></div><h3 id="withuserparams" tabindex="-1">withUserParams <a class="header-anchor" href="#withuserparams" aria-hidden="true">#</a></h3><p>You can call method <code>withUserParams</code> on a Knex instance if you want to get a copy (with same connections) with custom parameters (e. g. to execute same migrations with different parameters)</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Params</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> knexWithParams <span class="token operator">=</span> knex<span class="token punctuation">.</span><span class="token function">withUserParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">customUserParam</span><span class="token operator">:</span> <span class="token string">&#39;table1&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> customUserParam <span class="token operator">=</span> knexWithParams<span class="token punctuation">.</span>userParams<span class="token punctuation">.</span>customUserParam<span class="token punctuation">;</span>
</code></pre></div><h3 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-hidden="true">#</a></h3><p>Passing a <code>debug: true</code> flag on your initialization object will turn on <a href="/guide/query-builder.html#debug">debugging</a> for all queries.</p><h3 id="asyncstacktraces" tabindex="-1">asyncStackTraces <a class="header-anchor" href="#asyncstacktraces" aria-hidden="true">#</a></h3><p>Passing an <code>asyncStackTraces: true</code> flag on your initialization object will turn on stack trace capture for all query builders, raw queries and schema builders. When a DB driver returns an error, this previously captured stack trace is thrown instead of a new one. This helps to mitigate default behaviour of <code>await</code> in node.js/V8 which blows the stack away. This has small performance overhead, so it is advised to use only for development. Turned off by default.</p><h3 id="pool" tabindex="-1">pool <a class="header-anchor" href="#pool" aria-hidden="true">#</a></h3><p>The client created by the configuration initializes a connection pool, using the <a href="https://github.com/vincit/tarn.js" target="_blank" rel="noopener noreferrer">tarn.js</a> library. This connection pool has a default setting of a <code>min: 2, max: 10</code> for the MySQL and PG libraries, and a single connection for sqlite3 (due to issues with utilizing multiple connections on a single file). To change the config settings for the pool, pass a <code>pool</code> option as one of the keys in the initialize block.</p><p>Note that the default value of <code>min</code> is 2 only for historical reasons. It can result in problems with stale connections, despite tarn&#39;s default idle connection timeout of 30 seconds, which is only applied when there are more than <code>min</code> active connections. It is recommended to set <code>min: 0</code> so all idle connections can be terminated.</p><p>Checkout the <a href="https://github.com/vincit/tarn.js" target="_blank" rel="noopener noreferrer">tarn.js</a> library for more information.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pool</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you ever need to explicitly teardown the connection pool, you may use <code>knex.destroy([callback])</code>. You may use <code>knex.destroy</code> by passing a callback, or by chaining as a promise, just not both. To manually initialize a destroyed connection pool, you may use knex.initialize([config]), if no config is passed, it will use the first knex configuration used.</p><h3 id="aftercreate" tabindex="-1">afterCreate <a class="header-anchor" href="#aftercreate" aria-hidden="true">#</a></h3><p><code>afterCreate</code> callback (rawDriverConnection, done) is called when the pool aquires a new connection from the database server. done(err, connection) callback must be called for <code>knex</code> to be able to decide if the connection is ok or if it should be discarded right away from the pool.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;pg&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pool</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">afterCreate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">conn<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// in this example we use pg driver&#39;s connection API</span>
      conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SET timezone=&quot;UTC&quot;;&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// first query failed,</span>
          <span class="token comment">// return error and don&#39;t try to make next query</span>
          <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// do the second query...</span>
          conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT set_limit(0.01);&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// if err is not falsy,</span>
            <span class="token comment">//  connection is discarded from pool</span>
            <span class="token comment">// if connection aquire was triggered by a</span>
            <span class="token comment">// query the error is passed to query promise</span>
            <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="acquireconnectiontimeout" tabindex="-1">acquireConnectionTimeout <a class="header-anchor" href="#acquireconnectiontimeout" aria-hidden="true">#</a></h3><p><code>acquireConnectionTimeout</code> defaults to 60000ms and is used to determine how long knex should wait before throwing a timeout error when acquiring a connection is not possible. The most common cause for this is using up all the pool for transaction connections and then attempting to run queries outside of transactions while the pool is still full. The error thrown will provide information on the query the connection was for to simplify the job of locating the culprit.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;pg&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pool</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">acquireConnectionTimeout</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="fetchasstring" tabindex="-1">fetchAsString <a class="header-anchor" href="#fetchasstring" aria-hidden="true">#</a></h3><p>Utilized by Oracledb. An array of types. The valid types are &#39;DATE&#39;, &#39;NUMBER&#39; and &#39;CLOB&#39;. When any column having one of the specified types is queried, the column data is returned as a string instead of the default representation.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;oracledb&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fetchAsString</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clob&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="migrations" tabindex="-1">migrations <a class="header-anchor" href="#migrations" aria-hidden="true">#</a></h3><p>For convenience, any migration configuration may be specified when initializing the library. Read the <a href="/guide/migrations.html">Migrations</a> section for more information and a full list of configuration options.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">connection</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_database_user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_database_password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;myapp_test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">migrations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">tableName</span><span class="token operator">:</span> <span class="token string">&#39;migrations&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="postprocessresponse" tabindex="-1">postProcessResponse <a class="header-anchor" href="#postprocessresponse" aria-hidden="true">#</a></h3><p>Hook for modifying returned rows, before passing them forward to user. One can do for example snake_case -&gt; camelCase conversion for returned columns with this hook. The <code>queryContext</code> is only available if configured for a query builder instance via <a href="/guide/schema-builder.html#querycontext">queryContext</a>.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// overly simplified snake_case -&gt; camelCase converter</span>
  <span class="token function-variable function">postProcessResponse</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> queryContext</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: add special case for raw results</span>
    <span class="token comment">// (depends on dialect)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">convertToCamel</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">convertToCamel</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wrapidentifier" tabindex="-1">wrapIdentifier <a class="header-anchor" href="#wrapidentifier" aria-hidden="true">#</a></h3><p>Knex supports transforming identifier names automatically to quoted versions for each dialect. For example <code>&#39;Table.columnName as foo&#39;</code> for PostgreSQL is converted to &quot;Table&quot;.&quot;columnName&quot; as &quot;foo&quot;.</p><p>With <code>wrapIdentifier</code> one may override the way how identifiers are transformed. It can be used to override default functionality and for example to help doing <code>camelCase</code> -&gt; <code>snake_case</code> conversion.</p><p>Conversion function <code>wrapIdentifier(value, dialectImpl, context): string</code> gets each part of the identifier as a single <code>value</code>, the original conversion function from the dialect implementation and the <code>queryContext</code>, which is only available if configured for a query builder instance via <a href="/guide/query-builder.html#querycontext">builder.queryContext</a>, and for schema builder instances via <a href="/guide/schema-builder.html#querycontext">schema.queryContext</a> or <a href="/guide/schema-builder.html#querycontext-1">table.queryContext</a>. For example, with the query builder, <code>knex(&#39;table&#39;).withSchema(&#39;foo&#39;).select(&#39;table.field as otherName&#39;).where(&#39;id&#39;, 1)</code> will call <code>wrapIdentifier</code> converter for following values <code>&#39;table&#39;</code>, <code>&#39;foo&#39;</code>, <code>&#39;table&#39;</code>, <code>&#39;field&#39;</code>, <code>&#39;otherName&#39;</code> and <code>&#39;id&#39;</code>.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// overly simplified camelCase -&gt; snake_case converter</span>
  <span class="token function-variable function">wrapIdentifier</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> origImpl<span class="token punctuation">,</span> queryContext</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">origImpl</span><span class="token punctuation">(</span><span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="log" tabindex="-1">log <a class="header-anchor" href="#log" aria-hidden="true">#</a></h3><p>Knex contains some internal log functions for printing warnings, errors, deprecations, and debug information when applicable. These log functions typically log to the console, but can be overwritten using the log option and providing alternative functions. Different log functions can be used for separate knex instances.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="compilesqlonerror" tabindex="-1">compileSqlOnError <a class="header-anchor" href="#compilesqlonerror" aria-hidden="true">#</a></h3><p>Knex builds an error message in case of query error. By default Knex adds compiled SQL (<code>SELECT * FROM users WHERE password = &#39;myPassword&#39;</code>) to the error message. This can be changed to parameterized SQL (<code>SELECT * FROM users WHERE password = ?</code>) by setting <code>compileSqlOnError</code> to <code>false</code>.</p><div class="language-js"><pre><code><span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;knex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">compileSqlOnError</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h2><p>While knex is written in JavaScript, officially supported TypeScript bindings are available (within the knex npm package).</p><p>However it is to be noted that TypeScript support is currently best-effort. Knex has a very flexible API and not all usage patterns can be type-checked and in most such cases we err on the side of flexibility. In particular, lack of type errors doesn&#39;t currently guarantee that the generated queries will be correct and therefore writing tests for them is recommended even if you are using TypeScript.</p><p>Many of the APIs accept <code>TRecord</code> and <code>TResult</code> type parameters, using which we can specify the type of a row in the database table and the type of the result of the query respectively. This is helpful for auto-completion when using TypeScript-aware editors like VSCode.</p><p>To reduce boilerplate and add inferred types, you can augment <code>Tables</code> interface in <code>&#39;knex/types/tables&#39;</code> module.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Knex <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;knex&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;knex/types/tables&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    created_at<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    updated_at<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">interface</span> <span class="token class-name">Tables</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is same as specifying \`knex&lt;User&gt;(&#39;users&#39;)\`</span>
    users<span class="token operator">:</span> User<span class="token punctuation">;</span>
    <span class="token comment">// For more advanced types, you can specify separate type</span>
    <span class="token comment">// for base model, &quot;insert&quot; type and &quot;update&quot; type.</span>
    <span class="token comment">// But first: notice that if you choose to use this,</span>
    <span class="token comment">// the basic typing showed above can be ignored.</span>
    <span class="token comment">// So, this is like specifying</span>
    <span class="token comment">//    knex</span>
    <span class="token comment">//    .insert&lt;{ name: string }&gt;({ name: &#39;name&#39; })</span>
    <span class="token comment">//    .into&lt;{ name: string, id: number }&gt;(&#39;users&#39;)</span>
    users_composite<span class="token operator">:</span> Knex<span class="token punctuation">.</span>CompositeTableType<span class="token operator">&lt;</span>
      <span class="token comment">// This interface will be used for return type and</span>
      <span class="token comment">// \`where\`, \`having\` etc where full type is required</span>
      User<span class="token punctuation">,</span>
      <span class="token comment">// Specifying &quot;insert&quot; type will also make sure</span>
      <span class="token comment">// data matches interface in full. Meaning</span>
      <span class="token comment">// if interface is \`{ a: string, b: string }\`,</span>
      <span class="token comment">// \`insert({ a: &#39;&#39; })\` will complain about missing fields.</span>
      <span class="token comment">//</span>
      <span class="token comment">// For example, this will require only &quot;name&quot; field when inserting</span>
      <span class="token comment">// and make created_at and updated_at optional.</span>
      <span class="token comment">// And &quot;id&quot; can&#39;t be provided at all.</span>
      <span class="token comment">// Defaults to &quot;base&quot; type.</span>
      Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> Partial<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;created_at&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;updated_at&#39;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
      <span class="token comment">// This interface is used for &quot;update()&quot; calls.</span>
      <span class="token comment">// As opposed to regular specifying interface only once,</span>
      <span class="token comment">// when specifying separate update interface, user will be</span>
      <span class="token comment">// required to match it  exactly. So it&#39;s recommended to</span>
      <span class="token comment">// provide partial interfaces for &quot;update&quot;. Unless you want to always</span>
      <span class="token comment">// require some field (e.g., \`Partial&lt;User&gt; &amp; { updated_at: string }\`</span>
      <span class="token comment">// will allow updating any field for User but require updated_at to be</span>
      <span class="token comment">// always provided as well.</span>
      <span class="token comment">//</span>
      <span class="token comment">// For example, this wil allow updating all fields except &quot;id&quot;.</span>
      <span class="token comment">// &quot;id&quot; will still be usable for \`where\` clauses so</span>
      <span class="token comment">//      knex(&#39;users_composite&#39;)</span>
      <span class="token comment">//      .update({ name: &#39;name2&#39; })</span>
      <span class="token comment">//      .where(&#39;id&#39;, 10)\`</span>
      <span class="token comment">// will still work.</span>
      <span class="token comment">// Defaults to Partial &quot;insert&quot; type</span>
      <span class="token class-name">Partial<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token operator">&gt;&gt;</span></span>
    <span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When TypeScript is configured to use a modern module resolution setting (<code>node16</code>, <code>nodenext</code>, etc.), the compiler expects that the declared module name ends with a <code>.js</code> file type. You will need to declare your inferred types as follows instead:</p><div class="language-ts"><pre><code><span class="token comment">// The trailing \`.js\` is required by the TypeScript compiler in certain configs:</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;knex/types/tables.js&#39;</span> <span class="token punctuation">{</span>
  <span class="token comment">// &lt;----- Different module path!!!</span>
  <span class="token keyword">interface</span> <span class="token class-name">Tables</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,81),o=[e];function c(r,l,i,u,k,d){return a(),s("div",null,o)}var g=n(p,[["render",c]]);export{m as __pageData,g as default};
