import{_ as n,c as s,o as a,a as t}from"./app.36cb52e5.js";const y='{"title":"Transactions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Transaction Modes","slug":"transaction-modes"}],"relativePath":"guide/transactions.md"}',p={},o=t(`<h1 id="transactions" tabindex="-1">Transactions <a class="header-anchor" href="#transactions" aria-hidden="true">#</a></h1><p>Transactions are an important feature of relational databases, as they allow correct recovery from failures and keep a database consistent even in cases of system failure. All queries within a transaction are executed on the same database connection, and run the entire set of queries as a single unit of work. Any failure will mean the database will rollback any queries executed on that connection to the pre-transaction state.</p><p>Transactions are handled by passing a handler function into <code>knex.transaction</code>. The handler function accepts a single argument, an object which may be used in two ways:</p><ol><li>As the &quot;promise aware&quot; knex connection</li><li>As an object passed into a query with <a href="/guide/query-builder.html#transacting">transacting</a> and eventually call commit or rollback.</li></ol><p>Consider these two examples:</p><div class="language-js"><pre><code><span class="token comment">// Using trx as a query builder:</span>
knex
  <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">trx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Canterbury Tales&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Moby Dick&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Hamlet&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> trx
      <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Old Books&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token string">&#39;catalogues&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ids</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">book</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>catalogue_id <span class="token operator">=</span> ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">trx</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">inserts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inserts<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&#39; new books saved.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If we get here, that means that</span>
    <span class="token comment">// neither the &#39;Old Books&#39; catalogues insert,</span>
    <span class="token comment">// nor any of the books inserts will have taken place.</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>And then this example:</p><div class="language-js"><pre><code><span class="token comment">// Using trx as a transaction object:</span>
knex
  <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">trx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Canterbury Tales&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Moby Dick&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Hamlet&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    knex
      <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Old Books&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token string">&#39;catalogues&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ids</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">book</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>catalogue_id <span class="token operator">=</span> ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>trx<span class="token punctuation">.</span>commit<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>trx<span class="token punctuation">.</span>rollback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">inserts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inserts<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&#39; new books saved.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If we get here, that means that</span>
    <span class="token comment">// neither the &#39;Old Books&#39; catalogues insert,</span>
    <span class="token comment">// nor any of the books inserts will have taken place.</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Same example as above using await/async:</p><div class="language-ts"><pre><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>trx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Canterbury Tales&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Moby Dick&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Hamlet&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> ids <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trx</span><span class="token punctuation">(</span><span class="token string">&#39;catalogues&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;Old Books&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">&#39;id&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>catalogue_id <span class="token operator">=</span> ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inserts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trx</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inserts<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&#39; new books saved.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If we get here, that means that neither the &#39;Old Books&#39; catalogues insert,</span>
  <span class="token comment">// nor any of the books inserts will have taken place.</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Same example as above using another await/async approach:</p><div class="language-ts"><pre><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>trx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Canterbury Tales&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Moby Dick&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Hamlet&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> ids <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;catalogues&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
          name<span class="token operator">:</span> <span class="token string">&#39;Old Books&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&#39;id&#39;</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>catalogue_id <span class="token operator">=</span> ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inserts<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&#39; new books saved.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Throwing an error directly from the transaction handler function automatically rolls back the transaction, same as returning a rejected promise.</p><p>Notice that if a promise is not returned within the handler, it is up to you to ensure <code>trx.commit</code>, or <code>trx.rollback</code> are called, otherwise the transaction connection will hang.</p><p>Calling <code>trx.rollback</code> will return a rejected Promise. If you don&#39;t pass any argument to <code>trx.rollback</code>, a generic <code>Error</code> object will be created and passed in to ensure the Promise always rejects with something.</p><p>Note that Amazon Redshift does not support savepoints in transactions.</p><p>In some cases you may prefer to create transaction but only execute statements in it later. In such case call method <code>transaction</code> without a handler function:</p><div class="language-ts"><pre><code><span class="token comment">// Using trx as a transaction object:</span>
<span class="token keyword">const</span> trx <span class="token operator">=</span> <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Canterbury Tales&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Moby Dick&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Hamlet&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">trx</span><span class="token punctuation">(</span><span class="token string">&#39;catalogues&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Old Books&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>catalogue_id <span class="token operator">=</span> ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">trx</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>trx<span class="token punctuation">.</span>commit<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>trx<span class="token punctuation">.</span>rollback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you want to create a reusable transaction instance, but do not want to actually start it until it is used, you can create a transaction provider instance. It will start transaction after being called for the first time, and return same transaction on subsequent calls:</p><div class="language-ts"><pre><code><span class="token comment">// Does not start a transaction yet</span>
<span class="token keyword">const</span> trxProvider <span class="token operator">=</span> knex<span class="token punctuation">.</span><span class="token function">transactionProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Canterbury Tales&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Moby Dick&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Hamlet&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Starts a transaction</span>
<span class="token keyword">const</span> trx <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trxProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ids <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trx</span><span class="token punctuation">(</span><span class="token string">&#39;catalogues&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Old Books&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>catalogue_id <span class="token operator">=</span> ids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">trx</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Reuses same transaction</span>
<span class="token keyword">const</span> sameTrx <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trxProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ids2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sameTrx</span><span class="token punctuation">(</span><span class="token string">&#39;catalogues&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;New Books&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>catalogue_id <span class="token operator">=</span> ids2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">sameTrx</span><span class="token punctuation">(</span><span class="token string">&#39;books&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can access the promise that gets resolved after transaction is rolled back explicitly by user or committed, or rejected if it gets rolled back by DB itself, when using either way of creating transaction, from field <code>executionPromise</code>:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> trxProvider <span class="token operator">=</span> knex<span class="token punctuation">.</span><span class="token function">transactionProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> trx <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trxProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> trxPromise <span class="token operator">=</span> trx<span class="token punctuation">.</span>executionPromise<span class="token punctuation">;</span>

<span class="token keyword">const</span> trx2 <span class="token operator">=</span> <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> trx2Promise <span class="token operator">=</span> trx2<span class="token punctuation">.</span>executionPromise<span class="token punctuation">;</span>

<span class="token keyword">const</span> trxInitPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> trx3 <span class="token operator">=</span> <span class="token keyword">await</span> trxInitPromise<span class="token punctuation">;</span>
<span class="token keyword">const</span> trx3Promise <span class="token operator">=</span> trx3<span class="token punctuation">.</span>executionPromise<span class="token punctuation">;</span>
</code></pre></div><p>You can check if a transaction has been committed or rolled back with the method <code>isCompleted</code>:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> trx <span class="token operator">=</span> <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trx<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">await</span> trx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trx<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">const</span> trx2 <span class="token operator">=</span> knex<span class="token punctuation">.</span><span class="token function">transactionProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> trx2<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trx2<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><p>You can check the property <code>knex.isTransaction</code> to see if the current knex instance you are working with is a transaction.</p><h2 id="transaction-modes" tabindex="-1">Transaction Modes <a class="header-anchor" href="#transaction-modes" aria-hidden="true">#</a></h2><p>In case you need to specify an isolation level for your transaction, you can use a config parameter <code>isolationLevel</code>. Not supported by oracle and sqlite, options are <code>read uncommitted</code>, <code>read committed</code>, <code>repeatable read</code>, <code>snapshot</code> (mssql only), <code>serializable</code>.</p><div class="language-ts"><pre><code><span class="token comment">// Simple read skew example</span>
<span class="token keyword">const</span> isolationLevel <span class="token operator">=</span> <span class="token string">&#39;read committed&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> trx <span class="token operator">=</span> <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isolationLevel <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trx</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">knex</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trx</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> trx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// result1 may or may not deep equal result2 depending on isolation level</span>
</code></pre></div><p>You may also set the transaction mode as <code>read only</code> using the <code>readOnly</code> config parameter. It is currently only supported on mysql, postgres, and redshift.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> trx <span class="token operator">=</span> <span class="token keyword">await</span> knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> readOnly<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u{1F4A5} Cannot \`INSERT\` while inside a \`READ ONLY\` transaction</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">trx</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,30),c=[o];function e(u,l,i,k,r,d){return a(),s("div",null,c)}var f=n(p,[["render",e]]);export{y as __pageData,f as default};
